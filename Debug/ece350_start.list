
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec4  08003ec4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000068  08003f34  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  2000040c  08003f34  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000845a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b18  00000000  00000000  00028535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c4  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cb5  00000000  00000000  0002addc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aaa7  00000000  00000000  00041a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086dc1  00000000  00000000  0004c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024cc  00000000  00000000  000d32fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d57c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e44 	.word	0x08003e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e44 	.word	0x08003e44

080001e0 <PendSV_Handler>:
// SVC Handler
.thumb_func
PendSV_Handler:

	// Stores current tasks context into stack
	MRS R0, PSP
 80001e0:	f3ef 8009 	mrs	r0, PSP
  	LDR R2, = current_stackptr
 80001e4:	4a18      	ldr	r2, [pc, #96]	; (8000248 <Context_Switch+0xc>)
 	STMDB R0!, {R4-R11}
 80001e6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 	STR R0, [R2]
 80001ea:	6010      	str	r0, [r2, #0]

	BL PendSV_Handler_Main
 80001ec:	f001 f896 	bl	800131c <PendSV_Handler_Main>

 	// Starts next scheduled task
 	LDR R0, = scheduled_stackptr
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <Context_Switch+0x10>)
 	LDR R0, [R0]
 80001f2:	6800      	ldr	r0, [r0, #0]
  	LDMIA R0!, {R4-R11}
 80001f4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 80001f8:	f380 8809 	msr	PSP, r0
	MOV LR, #0xFFFFFFFD
 80001fc:	f06f 0e02 	mvn.w	lr, #2
 	BX LR
 8000200:	4770      	bx	lr

08000202 <SVC_Handler>:

.thumb_func
SVC_Handler:

	// Stores SVC Call # Number into R1
  	TST LR, #4
 8000202:	f01e 0f04 	tst.w	lr, #4
  	ITE EQ
 8000206:	bf0c      	ite	eq
  	MRSEQ R0, MSP
 8000208:	f3ef 8008 	mrseq	r0, MSP
  	MRSNE R0, PSP
 800020c:	f3ef 8009 	mrsne	r0, PSP
  	LDR R1, [R0, #24]
 8000210:	6981      	ldr	r1, [r0, #24]
  	LDRB R1, [R1, #-2]
 8000212:	f811 1c02 	ldrb.w	r1, [r1, #-2]

  	// If SVC Call Number is 1 run Start Task
  	TST R1, #2
 8000216:	f011 0f02 	tst.w	r1, #2
  	IT EQ
 800021a:	bf08      	it	eq
  	BEQ Start_Task
 800021c:	e005      	beq.n	800022a <Start_Task>

  	BL Context_Switch
 800021e:	f000 f80d 	bl	800023c <Context_Switch>

  	BL SVC_Handler_Main
 8000222:	f001 f84f 	bl	80012c4 <SVC_Handler_Main>

  	BL Start_Task
 8000226:	f000 f800 	bl	800022a <Start_Task>

0800022a <Start_Task>:

// Start Task
 .thumb_func
 Start_Task:
 	LDR R0, = scheduled_stackptr
 800022a:	4808      	ldr	r0, [pc, #32]	; (800024c <Context_Switch+0x10>)
 	LDR R0, [R0]
 800022c:	6800      	ldr	r0, [r0, #0]
  	LDMIA R0!, {R4-R11}
 800022e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000232:	f380 8809 	msr	PSP, r0
	MOV LR, #0xFFFFFFFD
 8000236:	f06f 0e02 	mvn.w	lr, #2
 	BX LR
 800023a:	4770      	bx	lr

0800023c <Context_Switch>:

// Context Switch
 .thumb_func
 Context_Switch:
 	LDR R2, = current_stackptr
 800023c:	4a02      	ldr	r2, [pc, #8]	; (8000248 <Context_Switch+0xc>)
 	STMDB R0!, {R4-R11}
 800023e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 	STR R0, [R2]
 8000242:	6010      	str	r0, [r2, #0]
 	BX LR
 8000244:	4770      	bx	lr
 8000246:	0000      	.short	0x0000
  	LDR R2, = current_stackptr
 8000248:	20000264 	.word	0x20000264
 	LDR R0, = scheduled_stackptr
 800024c:	20000268 	.word	0x20000268

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <k_mem_init>:
uint32_t memInit = 0;
extern uint32_t kernelInit;
extern uint8_t currentTask;


int k_mem_init(){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    if(kernelInit == 0){
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <k_mem_init+0x7c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <k_mem_init+0x10>
        return RTX_ERR;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e030      	b.n	800065e <k_mem_init+0x72>
    }

    if(memInit == 1){
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <k_mem_init+0x80>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <k_mem_init+0x1c>
        return RTX_ERR;
 8000604:	2300      	movs	r3, #0
 8000606:	e02a      	b.n	800065e <k_mem_init+0x72>
    }

    // Get addresses for start and end of heap
    start_of_heap = &_img_end;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <k_mem_init+0x84>)
 800060a:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <k_mem_init+0x88>)
 800060c:	601a      	str	r2, [r3, #0]
    end_of_heap = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800060e:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <k_mem_init+0x8c>)
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <k_mem_init+0x90>)
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	461a      	mov	r2, r3
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <k_mem_init+0x94>)
 8000618:	601a      	str	r2, [r3, #0]

    // Creating head of the heap
    head = start_of_heap;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <k_mem_init+0x84>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <k_mem_init+0x98>)
 8000620:	6013      	str	r3, [r2, #0]
    head->metadata.owner = 0;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <k_mem_init+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
    head->metadata.type = FREE;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <k_mem_init+0x98>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
    head->metadata.size = (uint32_t) end_of_heap - (uint32_t) start_of_heap;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <k_mem_init+0x94>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <k_mem_init+0x84>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <k_mem_init+0x98>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1a8a      	subs	r2, r1, r2
 8000644:	605a      	str	r2, [r3, #4]
    head->next = NULL;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <k_mem_init+0x98>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
    head->prev = NULL;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <k_mem_init+0x98>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]

    memInit = 1;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <k_mem_init+0x80>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
    return RTX_OK;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000254 	.word	0x20000254
 800066c:	20000090 	.word	0x20000090
 8000670:	20000084 	.word	0x20000084
 8000674:	20008410 	.word	0x20008410
 8000678:	20018000 	.word	0x20018000
 800067c:	00004000 	.word	0x00004000
 8000680:	20000088 	.word	0x20000088
 8000684:	2000008c 	.word	0x2000008c

08000688 <k_mem_alloc>:



void* k_mem_alloc(size_t size){
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

	// If memory not initialized or size is 0 return NULL
	if (memInit == 0 || size == 0){
 8000690:	4b66      	ldr	r3, [pc, #408]	; (800082c <k_mem_alloc+0x1a4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <k_mem_alloc+0x16>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <k_mem_alloc+0x1a>
		return NULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	e0bd      	b.n	800081e <k_mem_alloc+0x196>
	}

	// First round up size to nearest multiple of 4 for byte alignment
	uint32_t allocate_size = ((size + 3) & ~0x03) + sizeof(free_header);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3303      	adds	r3, #3
 80006a6:	f023 0303 	bic.w	r3, r3, #3
 80006aa:	3314      	adds	r3, #20
 80006ac:	613b      	str	r3, [r7, #16]

	// Next iterate through linked list until we find a section large enough
	free_header * temp = head;
 80006ae:	4b60      	ldr	r3, [pc, #384]	; (8000830 <k_mem_alloc+0x1a8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	617b      	str	r3, [r7, #20]

	while (temp != NULL){
 80006b4:	e0ae      	b.n	8000814 <k_mem_alloc+0x18c>

		if (temp->metadata.size >= allocate_size){
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	f200 80a6 	bhi.w	800080e <k_mem_alloc+0x186>

			free_header * allocated = temp;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	60fb      	str	r3, [r7, #12]

			// Determine if size left over large enough to be useful
			if (temp->metadata.size - allocate_size >= sizeof(free_header) + 4){
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b17      	cmp	r3, #23
 80006d0:	d95a      	bls.n	8000788 <k_mem_alloc+0x100>

				// If yes shift free up and update linked list
				temp = (uint32_t) temp + allocate_size;
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	4413      	add	r3, r2
 80006d8:	617b      	str	r3, [r7, #20]


				temp->metadata = allocated->metadata;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				temp->metadata.size = temp->metadata.size - allocate_size;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	605a      	str	r2, [r3, #4]
				temp->next = allocated->next;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	68da      	ldr	r2, [r3, #12]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	60da      	str	r2, [r3, #12]
				temp->prev = allocated->prev;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	611a      	str	r2, [r3, #16]

				if (allocated->prev == NULL){ // Temp is first pointer in list
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d110      	bne.n	800072a <k_mem_alloc+0xa2>
					if (allocated->next != NULL){ // If first pointer in list update the next pointer and the nexts previous pointer
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <k_mem_alloc+0x9a>
						head = temp;
 8000710:	4a47      	ldr	r2, [pc, #284]	; (8000830 <k_mem_alloc+0x1a8>)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	6013      	str	r3, [r2, #0]
						head->next->prev = temp;
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <k_mem_alloc+0x1a8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	e020      	b.n	8000764 <k_mem_alloc+0xdc>
					} else { //only 1 free block
						head = temp;
 8000722:	4a43      	ldr	r2, [pc, #268]	; (8000830 <k_mem_alloc+0x1a8>)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e01c      	b.n	8000764 <k_mem_alloc+0xdc>
					}
				} else {
					if (allocated->next == NULL) {// If last pointer in list update the prev pointer and the previouses next pointer
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d108      	bne.n	8000744 <k_mem_alloc+0xbc>
						temp->prev = allocated->prev;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	611a      	str	r2, [r3, #16]
						temp->prev->next = temp;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	e00f      	b.n	8000764 <k_mem_alloc+0xdc>
					} else { // If both next and previous pointer exist update everything
						temp->next = allocated->next;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	60da      	str	r2, [r3, #12]
						temp->prev = allocated->prev;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	691a      	ldr	r2, [r3, #16]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	611a      	str	r2, [r3, #16]
						temp->next->prev = temp;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	611a      	str	r2, [r3, #16]
						temp->prev->next = temp;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	60da      	str	r2, [r3, #12]
					}
				}

				allocated->metadata.owner = currentTask;
 8000764:	4b33      	ldr	r3, [pc, #204]	; (8000834 <k_mem_alloc+0x1ac>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	609a      	str	r2, [r3, #8]
				allocated->metadata.type = ALLOCATED;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
				allocated->metadata.size = allocate_size;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	605a      	str	r2, [r3, #4]
				allocated->next = NULL;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
				allocated->prev = NULL;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	e03f      	b.n	8000808 <k_mem_alloc+0x180>
			} else {

				// If not enough left over space just allocate the whole thing
				allocate_size = temp->metadata.size;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	613b      	str	r3, [r7, #16]


				if (temp->prev == NULL){ // Temp is first free block
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d110      	bne.n	80007b8 <k_mem_alloc+0x130>
					if (temp->next == NULL){ // Temp is the only free block
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <k_mem_alloc+0x11e>
						head = NULL;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <k_mem_alloc+0x1a8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e01f      	b.n	80007e6 <k_mem_alloc+0x15e>
					} else { // Temp is first free block
						head = temp->next;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a21      	ldr	r2, [pc, #132]	; (8000830 <k_mem_alloc+0x1a8>)
 80007ac:	6013      	str	r3, [r2, #0]
						head->prev = NULL;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <k_mem_alloc+0x1a8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	e016      	b.n	80007e6 <k_mem_alloc+0x15e>
					}
				} else {
					if (temp->next == NULL){ // Temp is the last free block
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d106      	bne.n	80007ce <k_mem_alloc+0x146>
						temp->prev->next = NULL;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
						temp = NULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00b      	b.n	80007e6 <k_mem_alloc+0x15e>
					} else { // Temp is some middle block;
						temp->prev->next = temp->next;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	68d2      	ldr	r2, [r2, #12]
 80007d6:	60da      	str	r2, [r3, #12]
						temp->next->prev = temp->prev;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	6912      	ldr	r2, [r2, #16]
 80007e0:	611a      	str	r2, [r3, #16]
						temp = NULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
					}
				}

				allocated->metadata.owner = currentTask;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <k_mem_alloc+0x1ac>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	609a      	str	r2, [r3, #8]
				allocated->metadata.type = ALLOCATED;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
				allocated->metadata.size = allocate_size;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	605a      	str	r2, [r3, #4]
				allocated->next = NULL;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
				allocated->prev = NULL;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
			}
			return (uint32_t) allocated + sizeof(free_header);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3314      	adds	r3, #20
 800080c:	e007      	b.n	800081e <k_mem_alloc+0x196>
		} else {
			temp = temp->next;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	617b      	str	r3, [r7, #20]
	while (temp != NULL){
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	f47f af4d 	bne.w	80006b6 <k_mem_alloc+0x2e>
		}
	}
	return NULL;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000090 	.word	0x20000090
 8000830:	2000008c 	.word	0x2000008c
 8000834:	2000025c 	.word	0x2000025c

08000838 <k_mem_dealloc>:




int k_mem_dealloc(void* ptr){
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

	// If ptr NULL return RTX_OK
	if (ptr == NULL) return RTX_OK;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <k_mem_dealloc+0x12>
 8000846:	2301      	movs	r3, #1
 8000848:	e0c0      	b.n	80009cc <k_mem_dealloc+0x194>

	if ((uint32_t) ptr - sizeof(free_header) < (uint32_t) start_of_heap || (uint32_t) ptr - sizeof(free_header) > (uint32_t) end_of_heap) return RTX_ERR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b14      	subs	r3, #20
 800084e:	4a62      	ldr	r2, [pc, #392]	; (80009d8 <k_mem_dealloc+0x1a0>)
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	4293      	cmp	r3, r2
 8000854:	d305      	bcc.n	8000862 <k_mem_dealloc+0x2a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b14      	subs	r3, #20
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <k_mem_dealloc+0x1a4>)
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	4293      	cmp	r3, r2
 8000860:	d901      	bls.n	8000866 <k_mem_dealloc+0x2e>
 8000862:	2300      	movs	r3, #0
 8000864:	e0b2      	b.n	80009cc <k_mem_dealloc+0x194>

	// Find starting address of metadata structure
	free_header * address = (uint32_t) ptr - sizeof(free_header);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3b14      	subs	r3, #20
 800086a:	60bb      	str	r3, [r7, #8]

	// Ensure that this is a valid starting point and that we are the owner and the memory is allocated
	if (address->metadata.owner == currentTask && address->metadata.type == ALLOCATED){
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a5b      	ldr	r2, [pc, #364]	; (80009e0 <k_mem_dealloc+0x1a8>)
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	4293      	cmp	r3, r2
 8000876:	f040 80a8 	bne.w	80009ca <k_mem_dealloc+0x192>
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	f040 80a3 	bne.w	80009ca <k_mem_dealloc+0x192>
		address->metadata.type = FREE;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		address->metadata.owner = 0;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]

		// Find the first free block before this one
		free_header * temp = head;
 8000890:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <k_mem_dealloc+0x1ac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]

		// If this come before first free block it is the new head
		if ((uint32_t) address < (uint32_t) head){
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <k_mem_dealloc+0x1ac>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4293      	cmp	r3, r2
 800089e:	d241      	bcs.n	8000924 <k_mem_dealloc+0xec>
			address->next = head;
 80008a0:	4b50      	ldr	r3, [pc, #320]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60da      	str	r2, [r3, #12]
			address->prev = NULL;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
			head = address;
 80008ae:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	6013      	str	r3, [r2, #0]

			// Now check if the old head block can be coalesced
			if ((uint32_t) head + head->metadata.size == (uint32_t) temp){
 80008b4:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a4a      	ldr	r2, [pc, #296]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d119      	bne.n	80008fa <k_mem_dealloc+0xc2>
				head->next = temp->next;
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	68d2      	ldr	r2, [r2, #12]
 80008ce:	60da      	str	r2, [r3, #12]
				if (head->next != NULL) head->next->prev = head;
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <k_mem_dealloc+0xae>
 80008da:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a40      	ldr	r2, [pc, #256]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	611a      	str	r2, [r3, #16]
				head->metadata.size += temp->metadata.size;
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	440a      	add	r2, r1
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	e065      	b.n	80009c6 <k_mem_dealloc+0x18e>
			} else {
				head->next->prev = head;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <k_mem_dealloc+0x1ac>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <k_mem_dealloc+0x1ac>)
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	611a      	str	r2, [r3, #16]
 8000906:	e05e      	b.n	80009c6 <k_mem_dealloc+0x18e>
			}
		} else {
			while (temp != NULL){

				// If temp is greater than the address, we have found the very next free block
				if ((uint32_t) temp < (uint32_t) address){
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d20d      	bcs.n	800092c <k_mem_dealloc+0xf4>
					address->prev = temp;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	611a      	str	r2, [r3, #16]
					address->next = temp->next;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	60da      	str	r2, [r3, #12]
				} else {
					break;
				}

				temp=temp->next;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	60fb      	str	r3, [r7, #12]
			while (temp != NULL){
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1ee      	bne.n	8000908 <k_mem_dealloc+0xd0>
 800092a:	e000      	b.n	800092e <k_mem_dealloc+0xf6>
					break;
 800092c:	bf00      	nop
			}

			// Check if can coalesce with next block first
			if (address->next != NULL){
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d021      	beq.n	800097a <k_mem_dealloc+0x142>
				if ((uint32_t) address + address->metadata.size == (uint32_t) address->next){
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	68d2      	ldr	r2, [r2, #12]
 8000942:	4293      	cmp	r3, r2
 8000944:	d115      	bne.n	8000972 <k_mem_dealloc+0x13a>
					address->metadata.size += address->next->metadata.size;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	441a      	add	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	605a      	str	r2, [r3, #4]
					address->next = address->next->next;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60da      	str	r2, [r3, #12]

					if (address->next != NULL){
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d008      	beq.n	800097a <k_mem_dealloc+0x142>
						address->next->prev = address;
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	e003      	b.n	800097a <k_mem_dealloc+0x142>
					}

				} else {
					address->next->prev = address;
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	611a      	str	r2, [r3, #16]
				}
			}

			// Check if can coalesce with previous block
			if ((uint32_t) address->prev + address->prev->metadata.size == (uint32_t) address){
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	461a      	mov	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	441a      	add	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	429a      	cmp	r2, r3
 800098c:	d117      	bne.n	80009be <k_mem_dealloc+0x186>
				address->prev->metadata.size += address->metadata.size;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	6859      	ldr	r1, [r3, #4]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	440a      	add	r2, r1
 800099e:	605a      	str	r2, [r3, #4]
				address->prev->next = address->next;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	68d2      	ldr	r2, [r2, #12]
 80009a8:	60da      	str	r2, [r3, #12]

				if (address->next != NULL){
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <k_mem_dealloc+0x18e>
					address->next->prev = address->prev;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	6912      	ldr	r2, [r2, #16]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	e003      	b.n	80009c6 <k_mem_dealloc+0x18e>
				}

			} else {
				address->prev->next = address;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	60da      	str	r2, [r3, #12]
			}

		}

		return RTX_OK;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <k_mem_dealloc+0x194>
	}
	return RTX_ERR;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000084 	.word	0x20000084
 80009dc:	20000088 	.word	0x20000088
 80009e0:	2000025c 	.word	0x2000025c
 80009e4:	2000008c 	.word	0x2000008c

080009e8 <osKernelInit>:
uint32_t * scheduled_stackptr;
uint32_t stackUsed = 0;
uint32_t earliest_deadline;

void osKernelInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ee:	b672      	cpsid	i
}
 80009f0:	bf00      	nop
	// Set Kernel Init Flag
	__disable_irq();
	kernelInit = 1 ;
 80009f2:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <osKernelInit+0x174>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]

	k_mem_init();
 80009f8:	f7ff fdf8 	bl	80005ec <k_mem_init>

	// Initialize Main Stack Pointer
	MSP_INIT_VAL = * (uint32_t**) 0x0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <osKernelInit+0x178>)
 8000a02:	6013      	str	r3, [r2, #0]

	SHPR3 |= 0xFFU << 24; //Set the priority of SysTick to be the weakest
 8000a04:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <osKernelInit+0x17c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <osKernelInit+0x17c>)
 8000a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a0e:	6013      	str	r3, [r2, #0]
	SHPR3 |= 0xFEU << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 8000a10:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <osKernelInit+0x17c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <osKernelInit+0x17c>)
 8000a16:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 8000a1a:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; //set the priority of SVC higher than PendSV
 8000a1c:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <osKernelInit+0x180>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <osKernelInit+0x180>)
 8000a22:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 8000a26:	6013      	str	r3, [r2, #0]

	// Initialize TCB for all tasks
	for(int i = 0; i < MAX_TASKS; i++){
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	e048      	b.n	8000ac0 <osKernelInit+0xd8>
		tasks[i].tid = i;
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <osKernelInit+0x184>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4613      	mov	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4403      	add	r3, r0
 8000a3e:	3308      	adds	r3, #8
 8000a40:	6019      	str	r1, [r3, #0]
		tasks[i].ptask = NULL;
 8000a42:	494a      	ldr	r1, [pc, #296]	; (8000b6c <osKernelInit+0x184>)
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	440b      	add	r3, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
		tasks[i].state = DORMANT;
 8000a54:	4945      	ldr	r1, [pc, #276]	; (8000b6c <osKernelInit+0x184>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	1a9b      	subs	r3, r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	330c      	adds	r3, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		tasks[i].stack_high = 0;
 8000a68:	4940      	ldr	r1, [pc, #256]	; (8000b6c <osKernelInit+0x184>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	3304      	adds	r3, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
		tasks[i].stack_size = STACK_SIZE;
 8000a7c:	493b      	ldr	r1, [pc, #236]	; (8000b6c <osKernelInit+0x184>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4613      	mov	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	440b      	add	r3, r1
 8000a8a:	330e      	adds	r3, #14
 8000a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a90:	801a      	strh	r2, [r3, #0]
		tasks[i].deadline_ms = 0;
 8000a92:	4936      	ldr	r1, [pc, #216]	; (8000b6c <osKernelInit+0x184>)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3318      	adds	r3, #24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
		tasks[i].init_deadline = 5;
 8000aa6:	4931      	ldr	r1, [pc, #196]	; (8000b6c <osKernelInit+0x184>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++){
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	ddb3      	ble.n	8000a2e <osKernelInit+0x46>
	}

	// Setup NULL task
	tasks[0].deadline_ms = INT_MAX;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <osKernelInit+0x184>)
 8000ac8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000acc:	619a      	str	r2, [r3, #24]
	tasks[0].init_deadline = INT_MAX;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <osKernelInit+0x184>)
 8000ad0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000ad4:	615a      	str	r2, [r3, #20]
	tasks[0].ptask = &osYield;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <osKernelInit+0x184>)
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <osKernelInit+0x188>)
 8000ada:	601a      	str	r2, [r3, #0]

	tasks[0].stack_p = k_mem_alloc(STACK_SIZE);
 8000adc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ae0:	f7ff fdd2 	bl	8000688 <k_mem_alloc>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <osKernelInit+0x184>)
 8000ae8:	6113      	str	r3, [r2, #16]
	tasks[0].stack_high = (uint32_t) tasks[0].stack_p + STACK_SIZE;
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <osKernelInit+0x184>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <osKernelInit+0x184>)
 8000af4:	6053      	str	r3, [r2, #4]
	tasks[0].stack_p = tasks[0].stack_high;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <osKernelInit+0x184>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <osKernelInit+0x184>)
 8000afe:	611a      	str	r2, [r3, #16]

	*(--tasks[0].stack_p) = 1<<24;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <osKernelInit+0x184>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	3b04      	subs	r3, #4
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <osKernelInit+0x184>)
 8000b08:	6113      	str	r3, [r2, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <osKernelInit+0x184>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b12:	601a      	str	r2, [r3, #0]
	*(--tasks[0].stack_p) = (uint32_t) tasks[0].ptask;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <osKernelInit+0x184>)
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <osKernelInit+0x184>)
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	3b04      	subs	r3, #4
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <osKernelInit+0x184>)
 8000b20:	6113      	str	r3, [r2, #16]
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <osKernelInit+0x184>)
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	460a      	mov	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

	for (int j = 0; j < 14; ++j){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	e00b      	b.n	8000b48 <osKernelInit+0x160>
		*(--tasks[0].stack_p) = 0xA;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <osKernelInit+0x184>)
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	3b04      	subs	r3, #4
 8000b36:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <osKernelInit+0x184>)
 8000b38:	6113      	str	r3, [r2, #16]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <osKernelInit+0x184>)
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	220a      	movs	r2, #10
 8000b40:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 14; ++j){
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b0d      	cmp	r3, #13
 8000b4c:	ddf0      	ble.n	8000b30 <osKernelInit+0x148>
	}

	// Set task state to READY
	tasks[0].state = READY;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <osKernelInit+0x184>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	731a      	strb	r2, [r3, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000254 	.word	0x20000254
 8000b60:	20000260 	.word	0x20000260
 8000b64:	e000ed20 	.word	0xe000ed20
 8000b68:	e000ed1c 	.word	0xe000ed1c
 8000b6c:	20000094 	.word	0x20000094
 8000b70:	08000fd5 	.word	0x08000fd5

08000b74 <osCreateTask>:

int osCreateTask(TCB* task) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop

	__disable_irq();
	// If Kernel uninitialized or tasks stack_size is too small return RTX_ERR
	if (kernelInit == 0) {
 8000b80:	4ba5      	ldr	r3, [pc, #660]	; (8000e18 <osCreateTask+0x2a4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <osCreateTask+0x18>
		return RTX_ERR;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e141      	b.n	8000e10 <osCreateTask+0x29c>
	}

    int created = 0 ;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

    // Loop to check if space for task to be created
    for(int i = 1; i < MAX_TASKS; i++){
 8000b90:	2301      	movs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	e12e      	b.n	8000df4 <osCreateTask+0x280>
        if (tasks[i].state == DORMANT) {
 8000b96:	49a1      	ldr	r1, [pc, #644]	; (8000e1c <osCreateTask+0x2a8>)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	330c      	adds	r3, #12
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f040 8120 	bne.w	8000dee <osCreateTask+0x27a>

        	// Check if enough memory to allocate tasks stack to heap
        	tempTask = currentTask;
 8000bae:	4b9c      	ldr	r3, [pc, #624]	; (8000e20 <osCreateTask+0x2ac>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	4b9c      	ldr	r3, [pc, #624]	; (8000e24 <osCreateTask+0x2b0>)
 8000bb4:	701a      	strb	r2, [r3, #0]
        	currentTask = i;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <osCreateTask+0x2ac>)
 8000bbc:	701a      	strb	r2, [r3, #0]
        	tasks[i].stack_p = k_mem_alloc(task->stack_size);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	89db      	ldrh	r3, [r3, #14]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd60 	bl	8000688 <k_mem_alloc>
 8000bc8:	4601      	mov	r1, r0
 8000bca:	4894      	ldr	r0, [pc, #592]	; (8000e1c <osCreateTask+0x2a8>)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4403      	add	r3, r0
 8000bd8:	3310      	adds	r3, #16
 8000bda:	6019      	str	r1, [r3, #0]
        	currentTask = tempTask;
 8000bdc:	4b91      	ldr	r3, [pc, #580]	; (8000e24 <osCreateTask+0x2b0>)
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <osCreateTask+0x2ac>)
 8000be2:	701a      	strb	r2, [r3, #0]

        	if (tasks[i].stack_p == NULL){ // No more room for new task
 8000be4:	498d      	ldr	r1, [pc, #564]	; (8000e1c <osCreateTask+0x2a8>)
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4613      	mov	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	1a9b      	subs	r3, r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3310      	adds	r3, #16
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <osCreateTask+0x8a>
        		return RTX_ERR;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e108      	b.n	8000e10 <osCreateTask+0x29c>
        	} else {

        		tasks[i].tid = i;
 8000bfe:	6939      	ldr	r1, [r7, #16]
 8000c00:	4886      	ldr	r0, [pc, #536]	; (8000e1c <osCreateTask+0x2a8>)
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3308      	adds	r3, #8
 8000c10:	6019      	str	r1, [r3, #0]
				task->tid = i;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]

				// Get task function pointer address
				tasks[i].ptask = task->ptask;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	487f      	ldr	r0, [pc, #508]	; (8000e1c <osCreateTask+0x2a8>)
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4403      	add	r3, r0
 8000c2a:	6019      	str	r1, [r3, #0]

				// Get task stack size
				tasks[i].stack_size = task->stack_size ;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	89d8      	ldrh	r0, [r3, #14]
 8000c30:	497a      	ldr	r1, [pc, #488]	; (8000e1c <osCreateTask+0x2a8>)
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4613      	mov	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	330e      	adds	r3, #14
 8000c40:	4602      	mov	r2, r0
 8000c42:	801a      	strh	r2, [r3, #0]
				tasks[i].deadline_ms = tasks[i].init_deadline;
 8000c44:	4975      	ldr	r1, [pc, #468]	; (8000e1c <osCreateTask+0x2a8>)
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	3314      	adds	r3, #20
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	4871      	ldr	r0, [pc, #452]	; (8000e1c <osCreateTask+0x2a8>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4403      	add	r3, r0
 8000c64:	3318      	adds	r3, #24
 8000c66:	6019      	str	r1, [r3, #0]

				// Setup task stack
				tasks[i].stack_high = (uint32_t) tasks[i].stack_p + tasks[i].stack_size;
 8000c68:	496c      	ldr	r1, [pc, #432]	; (8000e1c <osCreateTask+0x2a8>)
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	3310      	adds	r3, #16
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	4967      	ldr	r1, [pc, #412]	; (8000e1c <osCreateTask+0x2a8>)
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4613      	mov	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	330e      	adds	r3, #14
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	18c1      	adds	r1, r0, r3
 8000c90:	4862      	ldr	r0, [pc, #392]	; (8000e1c <osCreateTask+0x2a8>)
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4613      	mov	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4403      	add	r3, r0
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	6019      	str	r1, [r3, #0]
				tasks[i].stack_p = tasks[i].stack_high;
 8000ca2:	495e      	ldr	r1, [pc, #376]	; (8000e1c <osCreateTask+0x2a8>)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	440b      	add	r3, r1
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	4959      	ldr	r1, [pc, #356]	; (8000e1c <osCreateTask+0x2a8>)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3310      	adds	r3, #16
 8000cc6:	6018      	str	r0, [r3, #0]

				*(--tasks[i].stack_p) = 1<<24;
 8000cc8:	4954      	ldr	r1, [pc, #336]	; (8000e1c <osCreateTask+0x2a8>)
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3310      	adds	r3, #16
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1f19      	subs	r1, r3, #4
 8000cdc:	484f      	ldr	r0, [pc, #316]	; (8000e1c <osCreateTask+0x2a8>)
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4403      	add	r3, r0
 8000cea:	3310      	adds	r3, #16
 8000cec:	6019      	str	r1, [r3, #0]
 8000cee:	494b      	ldr	r1, [pc, #300]	; (8000e1c <osCreateTask+0x2a8>)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3310      	adds	r3, #16
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d04:	601a      	str	r2, [r3, #0]
				*(--tasks[i].stack_p) = (uint32_t) tasks[i].ptask;
 8000d06:	4945      	ldr	r1, [pc, #276]	; (8000e1c <osCreateTask+0x2a8>)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	681c      	ldr	r4, [r3, #0]
 8000d16:	4941      	ldr	r1, [pc, #260]	; (8000e1c <osCreateTask+0x2a8>)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1f19      	subs	r1, r3, #4
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <osCreateTask+0x2a8>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4403      	add	r3, r0
 8000d38:	3310      	adds	r3, #16
 8000d3a:	6019      	str	r1, [r3, #0]
 8000d3c:	4937      	ldr	r1, [pc, #220]	; (8000e1c <osCreateTask+0x2a8>)
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4622      	mov	r2, r4
 8000d50:	601a      	str	r2, [r3, #0]

				for (int j = 0; j < 14; ++j){
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	e020      	b.n	8000d9a <osCreateTask+0x226>
					*(--tasks[i].stack_p) = 0xA;
 8000d58:	4930      	ldr	r1, [pc, #192]	; (8000e1c <osCreateTask+0x2a8>)
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	3310      	adds	r3, #16
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1f19      	subs	r1, r3, #4
 8000d6c:	482b      	ldr	r0, [pc, #172]	; (8000e1c <osCreateTask+0x2a8>)
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4403      	add	r3, r0
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	6019      	str	r1, [r3, #0]
 8000d7e:	4927      	ldr	r1, [pc, #156]	; (8000e1c <osCreateTask+0x2a8>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3310      	adds	r3, #16
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	220a      	movs	r2, #10
 8000d92:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 14; ++j){
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b0d      	cmp	r3, #13
 8000d9e:	dddb      	ble.n	8000d58 <osCreateTask+0x1e4>
				}

				// Set task state to READY
				tasks[i].state = READY;
 8000da0:	491e      	ldr	r1, [pc, #120]	; (8000e1c <osCreateTask+0x2a8>)
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4613      	mov	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	330c      	adds	r3, #12
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]

				// Update taskID and task created flag
				created = 1 ;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]

				if (kernelRunning == 1 && tasks[i].deadline_ms < tasks[i].init_deadline) {
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <osCreateTask+0x2b4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d11e      	bne.n	8000dfe <osCreateTask+0x28a>
 8000dc0:	4916      	ldr	r1, [pc, #88]	; (8000e1c <osCreateTask+0x2a8>)
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	3318      	adds	r3, #24
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <osCreateTask+0x2a8>)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4403      	add	r3, r0
 8000de0:	3314      	adds	r3, #20
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d20a      	bcs.n	8000dfe <osCreateTask+0x28a>
					osYield();
 8000de8:	f000 f8f4 	bl	8000fd4 <osYield>
				}

				break ;
 8000dec:	e007      	b.n	8000dfe <osCreateTask+0x28a>
    for(int i = 1; i < MAX_TASKS; i++){
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	3301      	adds	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	f77f aecd 	ble.w	8000b96 <osCreateTask+0x22>
 8000dfc:	e000      	b.n	8000e00 <osCreateTask+0x28c>
				break ;
 8000dfe:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000e00:	b662      	cpsie	i
}
 8000e02:	bf00      	nop
    }

    __enable_irq();

    // If task maximum reached return RTX_ERR
    if (created == 0) {
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <osCreateTask+0x29a>
        return RTX_ERR ;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <osCreateTask+0x29c>
    }

    // If tasks created successfully return RTX_OK
    return RTX_OK ;
 8000e0e:	2301      	movs	r3, #1

}
 8000e10:	4618      	mov	r0, r3
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20000254 	.word	0x20000254
 8000e1c:	20000094 	.word	0x20000094
 8000e20:	2000025c 	.word	0x2000025c
 8000e24:	2000025e 	.word	0x2000025e
 8000e28:	20000258 	.word	0x20000258

08000e2c <osKernelStart>:

int osKernelStart(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	SystemClock_Config();
 8000e30:	f000 fc4c 	bl	80016cc <SystemClock_Config>

	// Check if kernel not initialized or already running, if yes return RTX_ERR
	if (kernelInit == 0 || kernelRunning == 1) {
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <osKernelStart+0x30>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <osKernelStart+0x18>
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <osKernelStart+0x34>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <osKernelStart+0x1c>
		return RTX_ERR ;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e007      	b.n	8000e58 <osKernelStart+0x2c>
	}

	osScheduler();
 8000e48:	f000 f810 	bl	8000e6c <osScheduler>
	currentTask = newTask;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <osKernelStart+0x38>)
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <osKernelStart+0x3c>)
 8000e52:	701a      	strb	r2, [r3, #0]

	__asm("SVC #1");
 8000e54:	df01      	svc	1

	return RTX_OK;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000254 	.word	0x20000254
 8000e60:	20000258 	.word	0x20000258
 8000e64:	2000025d 	.word	0x2000025d
 8000e68:	2000025c 	.word	0x2000025c

08000e6c <osScheduler>:

void osScheduler(void){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e72:	b672      	cpsid	i
}
 8000e74:	bf00      	nop

	__disable_irq();
	if (tasks[currentTask].state == RUNNING){
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <osScheduler+0x148>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <osScheduler+0x14c>)
 8000e7e:	460b      	mov	r3, r1
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a5b      	subs	r3, r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	330c      	adds	r3, #12
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d12f      	bne.n	8000ef0 <osScheduler+0x84>
		tasks[currentTask].state = READY;
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <osScheduler+0x148>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <osScheduler+0x14c>)
 8000e98:	460b      	mov	r3, r1
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	330c      	adds	r3, #12
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
		tasks[currentTask].deadline_ms = tasks[currentTask].init_deadline;
 8000ea8:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <osScheduler+0x148>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <osScheduler+0x148>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <osScheduler+0x14c>)
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	1a5b      	subs	r3, r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3314      	adds	r3, #20
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	493c      	ldr	r1, [pc, #240]	; (8000fb8 <osScheduler+0x14c>)
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a1b      	subs	r3, r3, r0
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	601a      	str	r2, [r3, #0]
		earliest_deadline = tasks[currentTask].deadline_ms;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <osScheduler+0x148>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <osScheduler+0x14c>)
 8000edc:	460b      	mov	r3, r1
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3318      	adds	r3, #24
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <osScheduler+0x150>)
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e002      	b.n	8000ef6 <osScheduler+0x8a>
	} else {
		earliest_deadline = INT_MAX-1;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <osScheduler+0x150>)
 8000ef2:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <osScheduler+0x154>)
 8000ef4:	601a      	str	r2, [r3, #0]
	}

	current_stackptr = tasks[currentTask].stack_p;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <osScheduler+0x148>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <osScheduler+0x14c>)
 8000efe:	460b      	mov	r3, r1
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a5b      	subs	r3, r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	3310      	adds	r3, #16
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <osScheduler+0x158>)
 8000f0e:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < MAX_TASKS; ++i){
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	e034      	b.n	8000f80 <osScheduler+0x114>
		if (tasks[i].state == READY){
 8000f16:	4928      	ldr	r1, [pc, #160]	; (8000fb8 <osScheduler+0x14c>)
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	330c      	adds	r3, #12
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d126      	bne.n	8000f7a <osScheduler+0x10e>

			if (tasks[i].deadline_ms < earliest_deadline){
 8000f2c:	4922      	ldr	r1, [pc, #136]	; (8000fb8 <osScheduler+0x14c>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <osScheduler+0x150>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d219      	bcs.n	8000f7a <osScheduler+0x10e>
				newTask = i;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <osScheduler+0x15c>)
 8000f4c:	701a      	strb	r2, [r3, #0]
				earliest_deadline = tasks[i].deadline_ms;
 8000f4e:	491a      	ldr	r1, [pc, #104]	; (8000fb8 <osScheduler+0x14c>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3318      	adds	r3, #24
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <osScheduler+0x150>)
 8000f62:	6013      	str	r3, [r2, #0]
				scheduled_stackptr = tasks[i].stack_p;
 8000f64:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <osScheduler+0x14c>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	3310      	adds	r3, #16
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <osScheduler+0x160>)
 8000f78:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < MAX_TASKS; ++i){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	ddc7      	ble.n	8000f16 <osScheduler+0xaa>
			}
		}
	}

	tasks[newTask].state = RUNNING;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <osScheduler+0x15c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <osScheduler+0x14c>)
 8000f8e:	460b      	mov	r3, r1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	1a5b      	subs	r3, r3, r1
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	330c      	adds	r3, #12
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
	kernelRunning = 1;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <osScheduler+0x164>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa4:	b662      	cpsie	i
}
 8000fa6:	bf00      	nop

	__enable_irq();
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	2000025c 	.word	0x2000025c
 8000fb8:	20000094 	.word	0x20000094
 8000fbc:	2000026c 	.word	0x2000026c
 8000fc0:	7ffffffe 	.word	0x7ffffffe
 8000fc4:	20000264 	.word	0x20000264
 8000fc8:	2000025d 	.word	0x2000025d
 8000fcc:	20000268 	.word	0x20000268
 8000fd0:	20000258 	.word	0x20000258

08000fd4 <osYield>:

void osYield(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	if (kernelInit == 0 || kernelRunning == 0) {
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <osYield+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00d      	beq.n	8000ffc <osYield+0x28>
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <osYield+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d009      	beq.n	8000ffc <osYield+0x28>
		return RTX_ERR ;
	}

	osScheduler();
 8000fe8:	f7ff ff40 	bl	8000e6c <osScheduler>

	if (currentTask != newTask){
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <osYield+0x34>)
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <osYield+0x38>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d002      	beq.n	8000ffe <osYield+0x2a>
		__asm("SVC #2");
 8000ff8:	df02      	svc	2
 8000ffa:	e000      	b.n	8000ffe <osYield+0x2a>
		return RTX_ERR ;
 8000ffc:	bf00      	nop
	}
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000254 	.word	0x20000254
 8001004:	20000258 	.word	0x20000258
 8001008:	2000025c 	.word	0x2000025c
 800100c:	2000025d 	.word	0x2000025d

08001010 <osSleep>:

void osSleep(int timeInMs){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	tasks[currentTask].state = SLEEPING;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <osSleep+0x44>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <osSleep+0x48>)
 8001020:	460b      	mov	r3, r1
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	330c      	adds	r3, #12
 800102c:	2203      	movs	r2, #3
 800102e:	701a      	strb	r2, [r3, #0]
	tasks[currentTask].deadline_ms = timeInMs;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <osSleep+0x44>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <osSleep+0x48>)
 800103a:	4603      	mov	r3, r0
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a1b      	subs	r3, r3, r0
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3318      	adds	r3, #24
 8001046:	601a      	str	r2, [r3, #0]
	osYield();
 8001048:	f7ff ffc4 	bl	8000fd4 <osYield>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000025c 	.word	0x2000025c
 8001058:	20000094 	.word	0x20000094

0800105c <osTaskExit>:


	return RTX_ERR;
}

int osTaskExit(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	if (kernelInit == 0 || kernelRunning == 0) {
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <osTaskExit+0xac>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <osTaskExit+0x14>
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <osTaskExit+0xb0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <osTaskExit+0x18>
		return RTX_ERR ;
 8001070:	2300      	movs	r3, #0
 8001072:	e046      	b.n	8001102 <osTaskExit+0xa6>
	}
	// Check if was called by a running task, if not return RTC_ERR
	if (tasks[currentTask].state != RUNNING)
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <osTaskExit+0xb4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <osTaskExit+0xb8>)
 800107c:	460b      	mov	r3, r1
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	330c      	adds	r3, #12
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d001      	beq.n	8001092 <osTaskExit+0x36>
		return RTX_ERR;
 800108e:	2300      	movs	r3, #0
 8001090:	e037      	b.n	8001102 <osTaskExit+0xa6>

	// Set state to DORMANT and save return RTX_OK
	k_mem_dealloc(tasks[currentTask].stack_high - tasks[currentTask].stack_size);
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <osTaskExit+0xb4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <osTaskExit+0xb8>)
 800109a:	460b      	mov	r3, r1
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <osTaskExit+0xb4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	4919      	ldr	r1, [pc, #100]	; (8001114 <osTaskExit+0xb8>)
 80010b0:	4603      	mov	r3, r0
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a1b      	subs	r3, r3, r0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	330e      	adds	r3, #14
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fbb9 	bl	8000838 <k_mem_dealloc>
	tasks[currentTask].stack_high = 0;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <osTaskExit+0xb4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <osTaskExit+0xb8>)
 80010ce:	460b      	mov	r3, r1
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3304      	adds	r3, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	tasks[currentTask].state = DORMANT;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <osTaskExit+0xb4>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <osTaskExit+0xb8>)
 80010e6:	460b      	mov	r3, r1
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	1a5b      	subs	r3, r3, r1
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	330c      	adds	r3, #12
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	currentTask = 0;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <osTaskExit+0xb4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	osYield();
 80010fc:	f7ff ff6a 	bl	8000fd4 <osYield>

	return RTX_OK;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000254 	.word	0x20000254
 800110c:	20000258 	.word	0x20000258
 8001110:	2000025c 	.word	0x2000025c
 8001114:	20000094 	.word	0x20000094

08001118 <Task1>:
#include <stdio.h> //You are permitted to use this library, but currently only printf is implemented. Anything else is up to you!


int i_test = 0;

void Task1(void *) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	i_test++;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <Task1+0x38>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <Task1+0x38>)
 8001128:	6013      	str	r3, [r2, #0]
	osSleep(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff70 	bl	8001010 <osSleep>

	//instead of a while loop, keep recreating itself and exiting
	TCB st_mytask;
	st_mytask.ptask = &Task1;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <Task1+0x3c>)
 8001132:	60fb      	str	r3, [r7, #12]
	st_mytask.stack_size = 0x400;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	837b      	strh	r3, [r7, #26]
	osCreateTask(&st_mytask);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fd18 	bl	8000b74 <osCreateTask>
	osTaskExit();
 8001144:	f7ff ff8a 	bl	800105c <osTaskExit>
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000270 	.word	0x20000270
 8001154:	08001119 	.word	0x08001119

08001158 <Task2>:

void Task2(void *) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	while(1){
		printf("Back to you %d\r\n",i_test);
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <Task2+0x1c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <Task2+0x20>)
 8001168:	f001 fff6 	bl	8003158 <iprintf>
		osYield();
 800116c:	f7ff ff32 	bl	8000fd4 <osYield>
		printf("Back to you %d\r\n",i_test);
 8001170:	e7f6      	b.n	8001160 <Task2+0x8>
 8001172:	bf00      	nop
 8001174:	20000270 	.word	0x20000270
 8001178:	08003e5c 	.word	0x08003e5c

0800117c <main>:
	}
}

int main(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  /* MCU Configuration: Don't change this or the whole chip won't work!*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fbd7 	bl	8001934 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 faa1 	bl	80016cc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 fb35 	bl	80017f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800118e:	f000 fb09 	bl	80017a4 <MX_USART2_UART_Init>
  /* MCU Configuration is now complete. Start writing your code below this line */

  osKernelInit();
 8001192:	f7ff fc29 	bl	80009e8 <osKernelInit>

  TCB st_mytask;
  st_mytask.stack_size = 0x400;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	827b      	strh	r3, [r7, #18]

  st_mytask.ptask = &Task1;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <main+0x40>)
 800119e:	607b      	str	r3, [r7, #4]
  osCreateTask(&st_mytask);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fce6 	bl	8000b74 <osCreateTask>

  st_mytask.ptask = &Task2;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <main+0x44>)
 80011aa:	607b      	str	r3, [r7, #4]
  osCreateTask(&st_mytask);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fce0 	bl	8000b74 <osCreateTask>

  osKernelStart();
 80011b4:	f7ff fe3a 	bl	8000e2c <osKernelStart>

  while (1);
 80011b8:	e7fe      	b.n	80011b8 <main+0x3c>
 80011ba:	bf00      	nop
 80011bc:	08001119 	.word	0x08001119
 80011c0:	08001159 	.word	0x08001159

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001202:	2007      	movs	r0, #7
 8001204:	f000 fcba 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_UART_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12b      	bne.n	800128e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_UART_MspInit+0x88>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_UART_MspInit+0x88>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_UART_MspInit+0x88>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_UART_MspInit+0x88>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127e:	2307      	movs	r3, #7
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_UART_MspInit+0x8c>)
 800128a:	f000 fcab 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004400 	.word	0x40004400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>
	...

080012c4 <SVC_Handler_Main>:

/**
  * @brief This function handles System service call via SWI instruction.
  */

void SVC_Handler_Main(unsigned int *svc_args){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	tasks[currentTask].stack_p = current_stackptr;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <SVC_Handler_Main+0x38>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <SVC_Handler_Main+0x3c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	490b      	ldr	r1, [pc, #44]	; (8001304 <SVC_Handler_Main+0x40>)
 80012d8:	4603      	mov	r3, r0
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	1a1b      	subs	r3, r3, r0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3310      	adds	r3, #16
 80012e4:	601a      	str	r2, [r3, #0]
	currentTask = newTask;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <SVC_Handler_Main+0x44>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SVC_Handler_Main+0x38>)
 80012ec:	701a      	strb	r2, [r3, #0]
	return;
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000025c 	.word	0x2000025c
 8001300:	20000264 	.word	0x20000264
 8001304:	20000094 	.word	0x20000094
 8001308:	2000025d 	.word	0x2000025d

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <PendSV_Handler_Main>:

void PendSV_Handler_Main(void){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	tasks[currentTask].stack_p = current_stackptr;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <PendSV_Handler_Main+0x30>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <PendSV_Handler_Main+0x34>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	490a      	ldr	r1, [pc, #40]	; (8001354 <PendSV_Handler_Main+0x38>)
 800132c:	4603      	mov	r3, r0
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3310      	adds	r3, #16
 8001338:	601a      	str	r2, [r3, #0]
	currentTask = newTask;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <PendSV_Handler_Main+0x3c>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <PendSV_Handler_Main+0x30>)
 8001340:	701a      	strb	r2, [r3, #0]
	return;
 8001342:	bf00      	nop
}
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	2000025c 	.word	0x2000025c
 8001350:	20000264 	.word	0x20000264
 8001354:	20000094 	.word	0x20000094
 8001358:	2000025d 	.word	0x2000025d

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (kernelRunning != 1) return;
 8001362:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <SysTick_Handler+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	f040 80d6 	bne.w	8001518 <SysTick_Handler+0x1bc>
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800136c:	f000 fb34 	bl	80019d8 <HAL_IncTick>

	uint32_t earliest_deadline = tasks[currentTask].deadline_ms;
 8001370:	4b6c      	ldr	r3, [pc, #432]	; (8001524 <SysTick_Handler+0x1c8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <SysTick_Handler+0x1cc>)
 8001378:	460b      	mov	r3, r1
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3318      	adds	r3, #24
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	607b      	str	r3, [r7, #4]
	current_stackptr = tasks[currentTask].stack_p;
 8001388:	4b66      	ldr	r3, [pc, #408]	; (8001524 <SysTick_Handler+0x1c8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4a66      	ldr	r2, [pc, #408]	; (8001528 <SysTick_Handler+0x1cc>)
 8001390:	460b      	mov	r3, r1
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a5b      	subs	r3, r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3310      	adds	r3, #16
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a63      	ldr	r2, [pc, #396]	; (800152c <SysTick_Handler+0x1d0>)
 80013a0:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < MAX_TASKS; ++i){
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	e098      	b.n	80014da <SysTick_Handler+0x17e>
		if (tasks[i].state != DORMANT){
 80013a8:	495f      	ldr	r1, [pc, #380]	; (8001528 <SysTick_Handler+0x1cc>)
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	330c      	adds	r3, #12
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 808a 	beq.w	80014d4 <SysTick_Handler+0x178>

			if (tasks[i].state == RUNNING) tasks[i].state = READY;
 80013c0:	4959      	ldr	r1, [pc, #356]	; (8001528 <SysTick_Handler+0x1cc>)
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	330c      	adds	r3, #12
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d109      	bne.n	80013ea <SysTick_Handler+0x8e>
 80013d6:	4954      	ldr	r1, [pc, #336]	; (8001528 <SysTick_Handler+0x1cc>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	330c      	adds	r3, #12
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
			tasks[i].deadline_ms -= 1;
 80013ea:	494f      	ldr	r1, [pc, #316]	; (8001528 <SysTick_Handler+0x1cc>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3318      	adds	r3, #24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1e59      	subs	r1, r3, #1
 80013fe:	484a      	ldr	r0, [pc, #296]	; (8001528 <SysTick_Handler+0x1cc>)
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4403      	add	r3, r0
 800140c:	3318      	adds	r3, #24
 800140e:	6019      	str	r1, [r3, #0]

			if (tasks[i].deadline_ms == 0) {
 8001410:	4945      	ldr	r1, [pc, #276]	; (8001528 <SysTick_Handler+0x1cc>)
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3318      	adds	r3, #24
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d126      	bne.n	8001474 <SysTick_Handler+0x118>
				tasks[i].deadline_ms = tasks[i].init_deadline;
 8001426:	4940      	ldr	r1, [pc, #256]	; (8001528 <SysTick_Handler+0x1cc>)
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3314      	adds	r3, #20
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	483b      	ldr	r0, [pc, #236]	; (8001528 <SysTick_Handler+0x1cc>)
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4403      	add	r3, r0
 8001446:	3318      	adds	r3, #24
 8001448:	6019      	str	r1, [r3, #0]
				if (tasks[i].state == SLEEPING) tasks[i].state = READY;
 800144a:	4937      	ldr	r1, [pc, #220]	; (8001528 <SysTick_Handler+0x1cc>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	330c      	adds	r3, #12
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d109      	bne.n	8001474 <SysTick_Handler+0x118>
 8001460:	4931      	ldr	r1, [pc, #196]	; (8001528 <SysTick_Handler+0x1cc>)
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	330c      	adds	r3, #12
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
			}

			if (tasks[i].state == READY && tasks[i].deadline_ms < earliest_deadline){
 8001474:	492c      	ldr	r1, [pc, #176]	; (8001528 <SysTick_Handler+0x1cc>)
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	330c      	adds	r3, #12
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d124      	bne.n	80014d4 <SysTick_Handler+0x178>
 800148a:	4927      	ldr	r1, [pc, #156]	; (8001528 <SysTick_Handler+0x1cc>)
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	3318      	adds	r3, #24
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d918      	bls.n	80014d4 <SysTick_Handler+0x178>
						newTask = i;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SysTick_Handler+0x1d4>)
 80014a8:	701a      	strb	r2, [r3, #0]
						earliest_deadline = tasks[i].deadline_ms;
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <SysTick_Handler+0x1cc>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	3318      	adds	r3, #24
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	607b      	str	r3, [r7, #4]
						scheduled_stackptr = tasks[i].stack_p;
 80014be:	491a      	ldr	r1, [pc, #104]	; (8001528 <SysTick_Handler+0x1cc>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3310      	adds	r3, #16
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <SysTick_Handler+0x1d8>)
 80014d2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < MAX_TASKS; ++i){
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	f77f af63 	ble.w	80013a8 <SysTick_Handler+0x4c>
			}
		}
	}

	tasks[newTask].state = RUNNING;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <SysTick_Handler+0x1d4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <SysTick_Handler+0x1cc>)
 80014ea:	460b      	mov	r3, r1
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	1a5b      	subs	r3, r3, r1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	330c      	adds	r3, #12
 80014f6:	2202      	movs	r2, #2
 80014f8:	701a      	strb	r2, [r3, #0]
	if (newTask != currentTask){
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <SysTick_Handler+0x1d4>)
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <SysTick_Handler+0x1c8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d009      	beq.n	800151a <SysTick_Handler+0x1be>
		_ICSR |= 1<<28; //control register bit for a PendSV interrupt
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <SysTick_Handler+0x1dc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <SysTick_Handler+0x1dc>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6013      	str	r3, [r2, #0]
		__asm("isb");
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	e000      	b.n	800151a <SysTick_Handler+0x1be>
	if (kernelRunning != 1) return;
 8001518:	bf00      	nop
	}

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000258 	.word	0x20000258
 8001524:	2000025c 	.word	0x2000025c
 8001528:	20000094 	.word	0x20000094
 800152c:	20000264 	.word	0x20000264
 8001530:	2000025d 	.word	0x2000025d
 8001534:	20000268 	.word	0x20000268
 8001538:	e000ed04 	.word	0xe000ed04

0800153c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
  }

  return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e009      	b.n	800159c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f889 	bl	80016a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf1      	blt.n	8001588 <_write+0x12>
  }
  return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:

int _close(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
  return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f001 fe2a 	bl	80032a0 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20018000 	.word	0x20018000
 8001678:	00004000 	.word	0x00004000
 800167c:	20000274 	.word	0x20000274
 8001680:	20000410 	.word	0x20000410

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 80016b0:	1d39      	adds	r1, r7, #4
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	2201      	movs	r2, #1
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <__io_putchar+0x20>)
 80016ba:	f001 f916 	bl	80028ea <HAL_UART_Transmit>
	return ch;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000278 	.word	0x20000278

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	; 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fd91 	bl	8003202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <SystemClock_Config+0xd0>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <SystemClock_Config+0xd0>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <SystemClock_Config+0xd0>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <SystemClock_Config+0xd4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <SystemClock_Config+0xd4>)
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <SystemClock_Config+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001734:	2310      	movs	r3, #16
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001738:	2302      	movs	r3, #2
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001740:	2310      	movs	r3, #16
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001744:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800174a:	2304      	movs	r3, #4
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800174e:	2307      	movs	r3, #7
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fbe2 	bl	8001f20 <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001762:	f000 f8b7 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	230f      	movs	r3, #15
 8001768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2302      	movs	r3, #2
 800176c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fe44 	bl	8002410 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800178e:	f000 f8a1 	bl	80018d4 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_USART2_UART_Init+0x50>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART2_UART_Init+0x4c>)
 80017dc:	f001 f838 	bl	8002850 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017e6:	f000 f875 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000278 	.word	0x20000278
 80017f4:	40004400 	.word	0x40004400

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_GPIO_Init+0xd0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <MX_GPIO_Init+0xd0>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_GPIO_Init+0xd0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2120      	movs	r1, #32
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <MX_GPIO_Init+0xd4>)
 8001884:	f000 fb32 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <MX_GPIO_Init+0xd8>)
 80018a0:	f000 f9a0 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018a4:	2320      	movs	r3, #32
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_GPIO_Init+0xd4>)
 80018bc:	f000 f992 	bl	8001be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020800 	.word	0x40020800

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e6:	490e      	ldr	r1, [pc, #56]	; (8001920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018fc:	4c0b      	ldr	r4, [pc, #44]	; (800192c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190a:	f7ff febb 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f001 fccd 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fc33 	bl	800117c <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001924:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 8001928:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800192c:	2000040c 	.word	0x2000040c

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 f90d 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fc2c 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f917 	bl	8001bca <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 f8ed 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000008 	.word	0x20000008
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	200002bc 	.word	0x200002bc

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200002bc 	.word	0x200002bc

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff8e 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff47 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff5c 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff8e 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5d 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffb0 	bl	8001b38 <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e159      	b.n	8001eb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8148 	bne.w	8001eae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a2 	beq.w	8001eae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a49      	ldr	r2, [pc, #292]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x202>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_GPIO_Init+0x2f4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x1fe>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a47      	ldr	r2, [pc, #284]	; (8001edc <HAL_GPIO_Init+0x2f8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a46      	ldr	r2, [pc, #280]	; (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a45      	ldr	r2, [pc, #276]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x1f2>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001de6:	2300      	movs	r3, #0
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df8:	4935      	ldr	r1, [pc, #212]	; (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	f67f aea2 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e267      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d075      	beq.n	800202a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d00c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d112      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b7e      	ldr	r3, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d05b      	beq.n	8002028 <HAL_RCC_OscConfig+0x108>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d157      	bne.n	8002028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e242      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x74>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6f      	ldr	r2, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6c      	ldr	r2, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	4b69      	ldr	r3, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a68      	ldr	r2, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fd12 	bl	8001a00 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fd0e 	bl	8001a00 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e207      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xc0>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fcfe 	bl	8001a00 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fcfa 	bl	8001a00 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1f3      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	4b51      	ldr	r3, [pc, #324]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0xe8>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d063      	beq.n	80020fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800204a:	2b08      	cmp	r3, #8
 800204c:	d11c      	bne.n	8002088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x152>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1c7      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	e03a      	b.n	80020fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x244>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7ff fcb3 	bl	8001a00 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209e:	f7ff fcaf 	bl	8001a00 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1a8      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4925      	ldr	r1, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x244>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fc92 	bl	8001a00 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff fc8e 	bl	8001a00 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e187      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d036      	beq.n	8002178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_RCC_OscConfig+0x248>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff fc72 	bl	8001a00 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002120:	f7ff fc6e 	bl	8001a00 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e167      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x200>
 800213e:	e01b      	b.n	8002178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_OscConfig+0x248>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fc5b 	bl	8001a00 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	e00e      	b.n	800216c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214e:	f7ff fc57 	bl	8001a00 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d907      	bls.n	800216c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e150      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
 8002160:	40023800 	.word	0x40023800
 8002164:	42470000 	.word	0x42470000
 8002168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ea      	bne.n	800214e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8097 	beq.w	80022b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a73      	ldr	r2, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fc17 	bl	8001a00 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fc13 	bl	8001a00 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e10c      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x2ea>
 80021fc:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a63      	ldr	r2, [pc, #396]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x324>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x30c>
 8002212:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5e      	ldr	r2, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0x324>
 800222c:	4b58      	ldr	r3, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	4b55      	ldr	r3, [pc, #340]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	4a54      	ldr	r2, [pc, #336]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fbd8 	bl	8001a00 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7ff fbd4 	bl	8001a00 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0cb      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RCC_OscConfig+0x334>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fbc2 	bl	8001a00 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7ff fbbe 	bl	8001a00 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0b5      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ee      	bne.n	8002280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a1 	beq.w	8002400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d05c      	beq.n	8002384 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d141      	bne.n	8002356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fb92 	bl	8001a00 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff fb8e 	bl	8001a00 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e087      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	3b01      	subs	r3, #1
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7ff fb67 	bl	8001a00 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff fb63 	bl	8001a00 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e05c      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x416>
 8002354:	e054      	b.n	8002400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fb50 	bl	8001a00 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff fb4c 	bl	8001a00 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e045      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
 8002382:	e03d      	b.n	8002400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e038      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000
 8002398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d028      	beq.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d121      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0cc      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d90c      	bls.n	800244c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b8      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	494d      	ldr	r1, [pc, #308]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d044      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d119      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e067      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4934      	ldr	r1, [pc, #208]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7ff fa7e 	bl	8001a00 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7ff fa7a 	bl	8001a00 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d20c      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e032      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4916      	ldr	r1, [pc, #88]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002596:	f000 f821 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490a      	ldr	r1, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f9de 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08003e70 	.word	0x08003e70
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b094      	sub	sp, #80	; 0x50
 80025e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
 80025e8:	2300      	movs	r3, #0
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ec:	2300      	movs	r3, #0
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f4:	4b79      	ldr	r3, [pc, #484]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 8002600:	2b08      	cmp	r3, #8
 8002602:	f200 80e1 	bhi.w	80027c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x3a>
 800260e:	e0db      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002614:	e0db      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002616:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800261a:	e0d8      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	2200      	movs	r2, #0
 800263a:	63bb      	str	r3, [r7, #56]	; 0x38
 800263c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
 800264a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800264e:	4622      	mov	r2, r4
 8002650:	462b      	mov	r3, r5
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	0159      	lsls	r1, r3, #5
 800265c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002660:	0150      	lsls	r0, r2, #5
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4621      	mov	r1, r4
 8002668:	1a51      	subs	r1, r2, r1
 800266a:	6139      	str	r1, [r7, #16]
 800266c:	4629      	mov	r1, r5
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002680:	4659      	mov	r1, fp
 8002682:	018b      	lsls	r3, r1, #6
 8002684:	4651      	mov	r1, sl
 8002686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268a:	4651      	mov	r1, sl
 800268c:	018a      	lsls	r2, r1, #6
 800268e:	4651      	mov	r1, sl
 8002690:	ebb2 0801 	subs.w	r8, r2, r1
 8002694:	4659      	mov	r1, fp
 8002696:	eb63 0901 	sbc.w	r9, r3, r1
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ae:	4690      	mov	r8, r2
 80026b0:	4699      	mov	r9, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	eb18 0303 	adds.w	r3, r8, r3
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	462b      	mov	r3, r5
 80026bc:	eb49 0303 	adc.w	r3, r9, r3
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ce:	4629      	mov	r1, r5
 80026d0:	024b      	lsls	r3, r1, #9
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d8:	4621      	mov	r1, r4
 80026da:	024a      	lsls	r2, r1, #9
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e2:	2200      	movs	r2, #0
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026ec:	f7fd fe00 	bl	80002f0 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f8:	e058      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	2200      	movs	r2, #0
 8002702:	4618      	mov	r0, r3
 8002704:	4611      	mov	r1, r2
 8002706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002714:	4642      	mov	r2, r8
 8002716:	464b      	mov	r3, r9
 8002718:	f04f 0000 	mov.w	r0, #0
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	0159      	lsls	r1, r3, #5
 8002722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002726:	0150      	lsls	r0, r2, #5
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4641      	mov	r1, r8
 800272e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002732:	4649      	mov	r1, r9
 8002734:	eb63 0b01 	sbc.w	fp, r3, r1
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800274c:	ebb2 040a 	subs.w	r4, r2, sl
 8002750:	eb63 050b 	sbc.w	r5, r3, fp
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	00eb      	lsls	r3, r5, #3
 800275e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002762:	00e2      	lsls	r2, r4, #3
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4643      	mov	r3, r8
 800276a:	18e3      	adds	r3, r4, r3
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	464b      	mov	r3, r9
 8002770:	eb45 0303 	adc.w	r3, r5, r3
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002782:	4629      	mov	r1, r5
 8002784:	028b      	lsls	r3, r1, #10
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800278c:	4621      	mov	r1, r4
 800278e:	028a      	lsls	r2, r1, #10
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	61fa      	str	r2, [r7, #28]
 800279c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a0:	f7fd fda6 	bl	80002f0 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3750      	adds	r7, #80	; 0x50
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	00f42400 	.word	0x00f42400
 80027e4:	007a1200 	.word	0x007a1200

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002804:	f7ff fff0 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	0a9b      	lsrs	r3, r3, #10
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	08003e80 	.word	0x08003e80

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800282c:	f7ff ffdc 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0b5b      	lsrs	r3, r3, #13
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	08003e80 	.word	0x08003e80

08002850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e03f      	b.n	80028e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fccc 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f929 	bl	8002aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08a      	sub	sp, #40	; 0x28
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	d17c      	bne.n	8002a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_UART_Transmit+0x2c>
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e075      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit+0x3e>
 8002924:	2302      	movs	r3, #2
 8002926:	e06e      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2221      	movs	r2, #33	; 0x21
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293e:	f7ff f85f 	bl	8001a00 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x82>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800297c:	e02a      	b.n	80029d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f840 	bl	8002a0e <UART_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e036      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3302      	adds	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e007      	b.n	80029c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1cf      	bne.n	800297e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f810 	bl	8002a0e <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e006      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b090      	sub	sp, #64	; 0x40
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1e:	e050      	b.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d04c      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a2e:	f7fe ffe7 	bl	8001a00 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d241      	bcs.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a5e:	637a      	str	r2, [r7, #52]	; 0x34
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	613b      	str	r3, [r7, #16]
   return(result);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a92:	623a      	str	r2, [r7, #32]
 8002a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	69f9      	ldr	r1, [r7, #28]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e5      	bne.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e00f      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d09f      	beq.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3740      	adds	r7, #64	; 0x40
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af0:	b0c0      	sub	sp, #256	; 0x100
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	ea40 0301 	orr.w	r3, r0, r1
 8002b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b44:	f021 010c 	bic.w	r1, r1, #12
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b52:	430b      	orrs	r3, r1
 8002b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	6999      	ldr	r1, [r3, #24]
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	ea40 0301 	orr.w	r3, r0, r1
 8002b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b8f      	ldr	r3, [pc, #572]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d005      	beq.n	8002b8c <UART_SetConfig+0xa0>
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b8d      	ldr	r3, [pc, #564]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d104      	bne.n	8002b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b8c:	f7ff fe4c 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8002b90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b94:	e003      	b.n	8002b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b96:	f7ff fe33 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8002b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	f040 810c 	bne.w	8002dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	1891      	adds	r1, r2, r2
 8002bc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bc6:	415b      	adcs	r3, r3
 8002bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bce:	4621      	mov	r1, r4
 8002bd0:	eb12 0801 	adds.w	r8, r2, r1
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	eb43 0901 	adc.w	r9, r3, r1
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bee:	4690      	mov	r8, r2
 8002bf0:	4699      	mov	r9, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	eb18 0303 	adds.w	r3, r8, r3
 8002bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	eb49 0303 	adc.w	r3, r9, r3
 8002c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	18db      	adds	r3, r3, r3
 8002c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c20:	4613      	mov	r3, r2
 8002c22:	eb42 0303 	adc.w	r3, r2, r3
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
 8002c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c30:	f7fd fb5e 	bl	80002f0 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	011c      	lsls	r4, r3, #4
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c64:	4641      	mov	r1, r8
 8002c66:	eb12 0a01 	adds.w	sl, r2, r1
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c84:	4692      	mov	sl, r2
 8002c86:	469b      	mov	fp, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c92:	464b      	mov	r3, r9
 8002c94:	eb4b 0303 	adc.w	r3, fp, r3
 8002c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	18db      	adds	r3, r3, r3
 8002cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cc6:	f7fd fb13 	bl	80002f0 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2264      	movs	r2, #100	; 0x64
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	1acb      	subs	r3, r1, r3
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf4:	441c      	add	r4, r3
 8002cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d08:	4642      	mov	r2, r8
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d10:	415b      	adcs	r3, r3
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d18:	4641      	mov	r1, r8
 8002d1a:	1851      	adds	r1, r2, r1
 8002d1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d1e:	4649      	mov	r1, r9
 8002d20:	414b      	adcs	r3, r1
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d30:	4659      	mov	r1, fp
 8002d32:	00cb      	lsls	r3, r1, #3
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	00ca      	lsls	r2, r1, #3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	4642      	mov	r2, r8
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	460a      	mov	r2, r1
 8002d50:	eb42 0303 	adc.w	r3, r2, r3
 8002d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	18db      	adds	r3, r3, r3
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d72:	4613      	mov	r3, r2
 8002d74:	eb42 0303 	adc.w	r3, r2, r3
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d82:	f7fd fab5 	bl	80002f0 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 0207 	and.w	r2, r3, #7
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4422      	add	r2, r4
 8002db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002db4:	e106      	b.n	8002fc4 <UART_SetConfig+0x4d8>
 8002db6:	bf00      	nop
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dd6:	4642      	mov	r2, r8
 8002dd8:	464b      	mov	r3, r9
 8002dda:	1891      	adds	r1, r2, r2
 8002ddc:	6239      	str	r1, [r7, #32]
 8002dde:	415b      	adcs	r3, r3
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002de6:	4641      	mov	r1, r8
 8002de8:	1854      	adds	r4, r2, r1
 8002dea:	4649      	mov	r1, r9
 8002dec:	eb43 0501 	adc.w	r5, r3, r1
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	00eb      	lsls	r3, r5, #3
 8002dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dfe:	00e2      	lsls	r2, r4, #3
 8002e00:	4614      	mov	r4, r2
 8002e02:	461d      	mov	r5, r3
 8002e04:	4643      	mov	r3, r8
 8002e06:	18e3      	adds	r3, r4, r3
 8002e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	eb45 0303 	adc.w	r3, r5, r3
 8002e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e32:	4629      	mov	r1, r5
 8002e34:	008b      	lsls	r3, r1, #2
 8002e36:	4621      	mov	r1, r4
 8002e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	008a      	lsls	r2, r1, #2
 8002e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e44:	f7fd fa54 	bl	80002f0 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <UART_SetConfig+0x4e4>)
 8002e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	011c      	lsls	r4, r3, #4
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	61b9      	str	r1, [r7, #24]
 8002e70:	415b      	adcs	r3, r3
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	4641      	mov	r1, r8
 8002e7a:	1851      	adds	r1, r2, r1
 8002e7c:	6139      	str	r1, [r7, #16]
 8002e7e:	4649      	mov	r1, r9
 8002e80:	414b      	adcs	r3, r1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e90:	4659      	mov	r1, fp
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eac:	464b      	mov	r3, r9
 8002eae:	460a      	mov	r2, r1
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	008b      	lsls	r3, r1, #2
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eda:	4641      	mov	r1, r8
 8002edc:	008a      	lsls	r2, r1, #2
 8002ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ee2:	f7fd fa05 	bl	80002f0 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <UART_SetConfig+0x4e4>)
 8002eee:	fba3 2301 	umull	r2, r3, r3, r1
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2264      	movs	r2, #100	; 0x64
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	1acb      	subs	r3, r1, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <UART_SetConfig+0x4e4>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	441c      	add	r4, r3
 8002f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f12:	2200      	movs	r2, #0
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
 8002f16:	677a      	str	r2, [r7, #116]	; 0x74
 8002f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	415b      	adcs	r3, r3
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	1851      	adds	r1, r2, r1
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	4649      	mov	r1, r9
 8002f34:	414b      	adcs	r3, r1
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f44:	4659      	mov	r1, fp
 8002f46:	00cb      	lsls	r3, r1, #3
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4e:	4651      	mov	r1, sl
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	4642      	mov	r2, r8
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f5e:	464b      	mov	r3, r9
 8002f60:	460a      	mov	r2, r1
 8002f62:	eb42 0303 	adc.w	r3, r2, r3
 8002f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	663b      	str	r3, [r7, #96]	; 0x60
 8002f72:	667a      	str	r2, [r7, #100]	; 0x64
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f80:	4649      	mov	r1, r9
 8002f82:	008b      	lsls	r3, r1, #2
 8002f84:	4641      	mov	r1, r8
 8002f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	008a      	lsls	r2, r1, #2
 8002f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f92:	f7fd f9ad 	bl	80002f0 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <UART_SetConfig+0x4e4>)
 8002f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	2164      	movs	r1, #100	; 0x64
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	3332      	adds	r3, #50	; 0x32
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <UART_SetConfig+0x4e4>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4422      	add	r2, r4
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <std>:
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
 8002fda:	e9c0 3300 	strd	r3, r3, [r0]
 8002fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fe2:	6083      	str	r3, [r0, #8]
 8002fe4:	8181      	strh	r1, [r0, #12]
 8002fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe8:	81c2      	strh	r2, [r0, #14]
 8002fea:	6183      	str	r3, [r0, #24]
 8002fec:	4619      	mov	r1, r3
 8002fee:	2208      	movs	r2, #8
 8002ff0:	305c      	adds	r0, #92	; 0x5c
 8002ff2:	f000 f906 	bl	8003202 <memset>
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <std+0x58>)
 8002ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <std+0x5c>)
 8002ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <std+0x60>)
 8003000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <std+0x64>)
 8003004:	6323      	str	r3, [r4, #48]	; 0x30
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <std+0x68>)
 8003008:	6224      	str	r4, [r4, #32]
 800300a:	429c      	cmp	r4, r3
 800300c:	d006      	beq.n	800301c <std+0x48>
 800300e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003012:	4294      	cmp	r4, r2
 8003014:	d002      	beq.n	800301c <std+0x48>
 8003016:	33d0      	adds	r3, #208	; 0xd0
 8003018:	429c      	cmp	r4, r3
 800301a:	d105      	bne.n	8003028 <std+0x54>
 800301c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003024:	f000 b966 	b.w	80032f4 <__retarget_lock_init_recursive>
 8003028:	bd10      	pop	{r4, pc}
 800302a:	bf00      	nop
 800302c:	0800317d 	.word	0x0800317d
 8003030:	0800319f 	.word	0x0800319f
 8003034:	080031d7 	.word	0x080031d7
 8003038:	080031fb 	.word	0x080031fb
 800303c:	200002c0 	.word	0x200002c0

08003040 <stdio_exit_handler>:
 8003040:	4a02      	ldr	r2, [pc, #8]	; (800304c <stdio_exit_handler+0xc>)
 8003042:	4903      	ldr	r1, [pc, #12]	; (8003050 <stdio_exit_handler+0x10>)
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <stdio_exit_handler+0x14>)
 8003046:	f000 b869 	b.w	800311c <_fwalk_sglue>
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c
 8003050:	08003ba1 	.word	0x08003ba1
 8003054:	20000018 	.word	0x20000018

08003058 <cleanup_stdio>:
 8003058:	6841      	ldr	r1, [r0, #4]
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <cleanup_stdio+0x34>)
 800305c:	4299      	cmp	r1, r3
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	d001      	beq.n	8003068 <cleanup_stdio+0x10>
 8003064:	f000 fd9c 	bl	8003ba0 <_fflush_r>
 8003068:	68a1      	ldr	r1, [r4, #8]
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <cleanup_stdio+0x38>)
 800306c:	4299      	cmp	r1, r3
 800306e:	d002      	beq.n	8003076 <cleanup_stdio+0x1e>
 8003070:	4620      	mov	r0, r4
 8003072:	f000 fd95 	bl	8003ba0 <_fflush_r>
 8003076:	68e1      	ldr	r1, [r4, #12]
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <cleanup_stdio+0x3c>)
 800307a:	4299      	cmp	r1, r3
 800307c:	d004      	beq.n	8003088 <cleanup_stdio+0x30>
 800307e:	4620      	mov	r0, r4
 8003080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003084:	f000 bd8c 	b.w	8003ba0 <_fflush_r>
 8003088:	bd10      	pop	{r4, pc}
 800308a:	bf00      	nop
 800308c:	200002c0 	.word	0x200002c0
 8003090:	20000328 	.word	0x20000328
 8003094:	20000390 	.word	0x20000390

08003098 <global_stdio_init.part.0>:
 8003098:	b510      	push	{r4, lr}
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <global_stdio_init.part.0+0x30>)
 800309c:	4c0b      	ldr	r4, [pc, #44]	; (80030cc <global_stdio_init.part.0+0x34>)
 800309e:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <global_stdio_init.part.0+0x38>)
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4620      	mov	r0, r4
 80030a4:	2200      	movs	r2, #0
 80030a6:	2104      	movs	r1, #4
 80030a8:	f7ff ff94 	bl	8002fd4 <std>
 80030ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80030b0:	2201      	movs	r2, #1
 80030b2:	2109      	movs	r1, #9
 80030b4:	f7ff ff8e 	bl	8002fd4 <std>
 80030b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80030bc:	2202      	movs	r2, #2
 80030be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030c2:	2112      	movs	r1, #18
 80030c4:	f7ff bf86 	b.w	8002fd4 <std>
 80030c8:	200003f8 	.word	0x200003f8
 80030cc:	200002c0 	.word	0x200002c0
 80030d0:	08003041 	.word	0x08003041

080030d4 <__sfp_lock_acquire>:
 80030d4:	4801      	ldr	r0, [pc, #4]	; (80030dc <__sfp_lock_acquire+0x8>)
 80030d6:	f000 b90e 	b.w	80032f6 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	20000401 	.word	0x20000401

080030e0 <__sfp_lock_release>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__sfp_lock_release+0x8>)
 80030e2:	f000 b909 	b.w	80032f8 <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	20000401 	.word	0x20000401

080030ec <__sinit>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
 80030f0:	f7ff fff0 	bl	80030d4 <__sfp_lock_acquire>
 80030f4:	6a23      	ldr	r3, [r4, #32]
 80030f6:	b11b      	cbz	r3, 8003100 <__sinit+0x14>
 80030f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fc:	f7ff bff0 	b.w	80030e0 <__sfp_lock_release>
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__sinit+0x28>)
 8003102:	6223      	str	r3, [r4, #32]
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <__sinit+0x2c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f5      	bne.n	80030f8 <__sinit+0xc>
 800310c:	f7ff ffc4 	bl	8003098 <global_stdio_init.part.0>
 8003110:	e7f2      	b.n	80030f8 <__sinit+0xc>
 8003112:	bf00      	nop
 8003114:	08003059 	.word	0x08003059
 8003118:	200003f8 	.word	0x200003f8

0800311c <_fwalk_sglue>:
 800311c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003120:	4607      	mov	r7, r0
 8003122:	4688      	mov	r8, r1
 8003124:	4614      	mov	r4, r2
 8003126:	2600      	movs	r6, #0
 8003128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800312c:	f1b9 0901 	subs.w	r9, r9, #1
 8003130:	d505      	bpl.n	800313e <_fwalk_sglue+0x22>
 8003132:	6824      	ldr	r4, [r4, #0]
 8003134:	2c00      	cmp	r4, #0
 8003136:	d1f7      	bne.n	8003128 <_fwalk_sglue+0xc>
 8003138:	4630      	mov	r0, r6
 800313a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313e:	89ab      	ldrh	r3, [r5, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d907      	bls.n	8003154 <_fwalk_sglue+0x38>
 8003144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003148:	3301      	adds	r3, #1
 800314a:	d003      	beq.n	8003154 <_fwalk_sglue+0x38>
 800314c:	4629      	mov	r1, r5
 800314e:	4638      	mov	r0, r7
 8003150:	47c0      	blx	r8
 8003152:	4306      	orrs	r6, r0
 8003154:	3568      	adds	r5, #104	; 0x68
 8003156:	e7e9      	b.n	800312c <_fwalk_sglue+0x10>

08003158 <iprintf>:
 8003158:	b40f      	push	{r0, r1, r2, r3}
 800315a:	b507      	push	{r0, r1, r2, lr}
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <iprintf+0x20>)
 800315e:	ab04      	add	r3, sp, #16
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	f853 2b04 	ldr.w	r2, [r3], #4
 8003166:	6881      	ldr	r1, [r0, #8]
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	f000 f9e9 	bl	8003540 <_vfiprintf_r>
 800316e:	b003      	add	sp, #12
 8003170:	f85d eb04 	ldr.w	lr, [sp], #4
 8003174:	b004      	add	sp, #16
 8003176:	4770      	bx	lr
 8003178:	20000064 	.word	0x20000064

0800317c <__sread>:
 800317c:	b510      	push	{r4, lr}
 800317e:	460c      	mov	r4, r1
 8003180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003184:	f000 f868 	bl	8003258 <_read_r>
 8003188:	2800      	cmp	r0, #0
 800318a:	bfab      	itete	ge
 800318c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800318e:	89a3      	ldrhlt	r3, [r4, #12]
 8003190:	181b      	addge	r3, r3, r0
 8003192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003196:	bfac      	ite	ge
 8003198:	6563      	strge	r3, [r4, #84]	; 0x54
 800319a:	81a3      	strhlt	r3, [r4, #12]
 800319c:	bd10      	pop	{r4, pc}

0800319e <__swrite>:
 800319e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a2:	461f      	mov	r7, r3
 80031a4:	898b      	ldrh	r3, [r1, #12]
 80031a6:	05db      	lsls	r3, r3, #23
 80031a8:	4605      	mov	r5, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	4616      	mov	r6, r2
 80031ae:	d505      	bpl.n	80031bc <__swrite+0x1e>
 80031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b4:	2302      	movs	r3, #2
 80031b6:	2200      	movs	r2, #0
 80031b8:	f000 f83c 	bl	8003234 <_lseek_r>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	4632      	mov	r2, r6
 80031ca:	463b      	mov	r3, r7
 80031cc:	4628      	mov	r0, r5
 80031ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031d2:	f000 b853 	b.w	800327c <_write_r>

080031d6 <__sseek>:
 80031d6:	b510      	push	{r4, lr}
 80031d8:	460c      	mov	r4, r1
 80031da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031de:	f000 f829 	bl	8003234 <_lseek_r>
 80031e2:	1c43      	adds	r3, r0, #1
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	bf15      	itete	ne
 80031e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80031ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031f2:	81a3      	strheq	r3, [r4, #12]
 80031f4:	bf18      	it	ne
 80031f6:	81a3      	strhne	r3, [r4, #12]
 80031f8:	bd10      	pop	{r4, pc}

080031fa <__sclose>:
 80031fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fe:	f000 b809 	b.w	8003214 <_close_r>

08003202 <memset>:
 8003202:	4402      	add	r2, r0
 8003204:	4603      	mov	r3, r0
 8003206:	4293      	cmp	r3, r2
 8003208:	d100      	bne.n	800320c <memset+0xa>
 800320a:	4770      	bx	lr
 800320c:	f803 1b01 	strb.w	r1, [r3], #1
 8003210:	e7f9      	b.n	8003206 <memset+0x4>
	...

08003214 <_close_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4d06      	ldr	r5, [pc, #24]	; (8003230 <_close_r+0x1c>)
 8003218:	2300      	movs	r3, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	602b      	str	r3, [r5, #0]
 8003220:	f7fe f9c5 	bl	80015ae <_close>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d102      	bne.n	800322e <_close_r+0x1a>
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	b103      	cbz	r3, 800322e <_close_r+0x1a>
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	bd38      	pop	{r3, r4, r5, pc}
 8003230:	200003fc 	.word	0x200003fc

08003234 <_lseek_r>:
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4d07      	ldr	r5, [pc, #28]	; (8003254 <_lseek_r+0x20>)
 8003238:	4604      	mov	r4, r0
 800323a:	4608      	mov	r0, r1
 800323c:	4611      	mov	r1, r2
 800323e:	2200      	movs	r2, #0
 8003240:	602a      	str	r2, [r5, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	f7fe f9da 	bl	80015fc <_lseek>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d102      	bne.n	8003252 <_lseek_r+0x1e>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	b103      	cbz	r3, 8003252 <_lseek_r+0x1e>
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	200003fc 	.word	0x200003fc

08003258 <_read_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4d07      	ldr	r5, [pc, #28]	; (8003278 <_read_r+0x20>)
 800325c:	4604      	mov	r4, r0
 800325e:	4608      	mov	r0, r1
 8003260:	4611      	mov	r1, r2
 8003262:	2200      	movs	r2, #0
 8003264:	602a      	str	r2, [r5, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f7fe f968 	bl	800153c <_read>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_read_r+0x1e>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_read_r+0x1e>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	200003fc 	.word	0x200003fc

0800327c <_write_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4d07      	ldr	r5, [pc, #28]	; (800329c <_write_r+0x20>)
 8003280:	4604      	mov	r4, r0
 8003282:	4608      	mov	r0, r1
 8003284:	4611      	mov	r1, r2
 8003286:	2200      	movs	r2, #0
 8003288:	602a      	str	r2, [r5, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	f7fe f973 	bl	8001576 <_write>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_write_r+0x1e>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	b103      	cbz	r3, 800329a <_write_r+0x1e>
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	200003fc 	.word	0x200003fc

080032a0 <__errno>:
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <__errno+0x8>)
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000064 	.word	0x20000064

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4d0d      	ldr	r5, [pc, #52]	; (80032e4 <__libc_init_array+0x38>)
 80032b0:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b2:	1b64      	subs	r4, r4, r5
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	2600      	movs	r6, #0
 80032b8:	42a6      	cmp	r6, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	4d0b      	ldr	r5, [pc, #44]	; (80032ec <__libc_init_array+0x40>)
 80032be:	4c0c      	ldr	r4, [pc, #48]	; (80032f0 <__libc_init_array+0x44>)
 80032c0:	f000 fdc0 	bl	8003e44 <_init>
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	2600      	movs	r6, #0
 80032ca:	42a6      	cmp	r6, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d4:	4798      	blx	r3
 80032d6:	3601      	adds	r6, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f855 3b04 	ldr.w	r3, [r5], #4
 80032de:	4798      	blx	r3
 80032e0:	3601      	adds	r6, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	08003ec4 	.word	0x08003ec4
 80032e8:	08003ec4 	.word	0x08003ec4
 80032ec:	08003ec4 	.word	0x08003ec4
 80032f0:	08003ec8 	.word	0x08003ec8

080032f4 <__retarget_lock_init_recursive>:
 80032f4:	4770      	bx	lr

080032f6 <__retarget_lock_acquire_recursive>:
 80032f6:	4770      	bx	lr

080032f8 <__retarget_lock_release_recursive>:
 80032f8:	4770      	bx	lr
	...

080032fc <_free_r>:
 80032fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032fe:	2900      	cmp	r1, #0
 8003300:	d044      	beq.n	800338c <_free_r+0x90>
 8003302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003306:	9001      	str	r0, [sp, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f1a1 0404 	sub.w	r4, r1, #4
 800330e:	bfb8      	it	lt
 8003310:	18e4      	addlt	r4, r4, r3
 8003312:	f000 f8df 	bl	80034d4 <__malloc_lock>
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <_free_r+0x94>)
 8003318:	9801      	ldr	r0, [sp, #4]
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	b933      	cbnz	r3, 800332c <_free_r+0x30>
 800331e:	6063      	str	r3, [r4, #4]
 8003320:	6014      	str	r4, [r2, #0]
 8003322:	b003      	add	sp, #12
 8003324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003328:	f000 b8da 	b.w	80034e0 <__malloc_unlock>
 800332c:	42a3      	cmp	r3, r4
 800332e:	d908      	bls.n	8003342 <_free_r+0x46>
 8003330:	6825      	ldr	r5, [r4, #0]
 8003332:	1961      	adds	r1, r4, r5
 8003334:	428b      	cmp	r3, r1
 8003336:	bf01      	itttt	eq
 8003338:	6819      	ldreq	r1, [r3, #0]
 800333a:	685b      	ldreq	r3, [r3, #4]
 800333c:	1949      	addeq	r1, r1, r5
 800333e:	6021      	streq	r1, [r4, #0]
 8003340:	e7ed      	b.n	800331e <_free_r+0x22>
 8003342:	461a      	mov	r2, r3
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b10b      	cbz	r3, 800334c <_free_r+0x50>
 8003348:	42a3      	cmp	r3, r4
 800334a:	d9fa      	bls.n	8003342 <_free_r+0x46>
 800334c:	6811      	ldr	r1, [r2, #0]
 800334e:	1855      	adds	r5, r2, r1
 8003350:	42a5      	cmp	r5, r4
 8003352:	d10b      	bne.n	800336c <_free_r+0x70>
 8003354:	6824      	ldr	r4, [r4, #0]
 8003356:	4421      	add	r1, r4
 8003358:	1854      	adds	r4, r2, r1
 800335a:	42a3      	cmp	r3, r4
 800335c:	6011      	str	r1, [r2, #0]
 800335e:	d1e0      	bne.n	8003322 <_free_r+0x26>
 8003360:	681c      	ldr	r4, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	6053      	str	r3, [r2, #4]
 8003366:	440c      	add	r4, r1
 8003368:	6014      	str	r4, [r2, #0]
 800336a:	e7da      	b.n	8003322 <_free_r+0x26>
 800336c:	d902      	bls.n	8003374 <_free_r+0x78>
 800336e:	230c      	movs	r3, #12
 8003370:	6003      	str	r3, [r0, #0]
 8003372:	e7d6      	b.n	8003322 <_free_r+0x26>
 8003374:	6825      	ldr	r5, [r4, #0]
 8003376:	1961      	adds	r1, r4, r5
 8003378:	428b      	cmp	r3, r1
 800337a:	bf04      	itt	eq
 800337c:	6819      	ldreq	r1, [r3, #0]
 800337e:	685b      	ldreq	r3, [r3, #4]
 8003380:	6063      	str	r3, [r4, #4]
 8003382:	bf04      	itt	eq
 8003384:	1949      	addeq	r1, r1, r5
 8003386:	6021      	streq	r1, [r4, #0]
 8003388:	6054      	str	r4, [r2, #4]
 800338a:	e7ca      	b.n	8003322 <_free_r+0x26>
 800338c:	b003      	add	sp, #12
 800338e:	bd30      	pop	{r4, r5, pc}
 8003390:	20000404 	.word	0x20000404

08003394 <sbrk_aligned>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4e0e      	ldr	r6, [pc, #56]	; (80033d0 <sbrk_aligned+0x3c>)
 8003398:	460c      	mov	r4, r1
 800339a:	6831      	ldr	r1, [r6, #0]
 800339c:	4605      	mov	r5, r0
 800339e:	b911      	cbnz	r1, 80033a6 <sbrk_aligned+0x12>
 80033a0:	f000 fcbc 	bl	8003d1c <_sbrk_r>
 80033a4:	6030      	str	r0, [r6, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 fcb7 	bl	8003d1c <_sbrk_r>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d00a      	beq.n	80033c8 <sbrk_aligned+0x34>
 80033b2:	1cc4      	adds	r4, r0, #3
 80033b4:	f024 0403 	bic.w	r4, r4, #3
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d007      	beq.n	80033cc <sbrk_aligned+0x38>
 80033bc:	1a21      	subs	r1, r4, r0
 80033be:	4628      	mov	r0, r5
 80033c0:	f000 fcac 	bl	8003d1c <_sbrk_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d101      	bne.n	80033cc <sbrk_aligned+0x38>
 80033c8:	f04f 34ff 	mov.w	r4, #4294967295
 80033cc:	4620      	mov	r0, r4
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	20000408 	.word	0x20000408

080033d4 <_malloc_r>:
 80033d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d8:	1ccd      	adds	r5, r1, #3
 80033da:	f025 0503 	bic.w	r5, r5, #3
 80033de:	3508      	adds	r5, #8
 80033e0:	2d0c      	cmp	r5, #12
 80033e2:	bf38      	it	cc
 80033e4:	250c      	movcc	r5, #12
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	4607      	mov	r7, r0
 80033ea:	db01      	blt.n	80033f0 <_malloc_r+0x1c>
 80033ec:	42a9      	cmp	r1, r5
 80033ee:	d905      	bls.n	80033fc <_malloc_r+0x28>
 80033f0:	230c      	movs	r3, #12
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	2600      	movs	r6, #0
 80033f6:	4630      	mov	r0, r6
 80033f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034d0 <_malloc_r+0xfc>
 8003400:	f000 f868 	bl	80034d4 <__malloc_lock>
 8003404:	f8d8 3000 	ldr.w	r3, [r8]
 8003408:	461c      	mov	r4, r3
 800340a:	bb5c      	cbnz	r4, 8003464 <_malloc_r+0x90>
 800340c:	4629      	mov	r1, r5
 800340e:	4638      	mov	r0, r7
 8003410:	f7ff ffc0 	bl	8003394 <sbrk_aligned>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	4604      	mov	r4, r0
 8003418:	d155      	bne.n	80034c6 <_malloc_r+0xf2>
 800341a:	f8d8 4000 	ldr.w	r4, [r8]
 800341e:	4626      	mov	r6, r4
 8003420:	2e00      	cmp	r6, #0
 8003422:	d145      	bne.n	80034b0 <_malloc_r+0xdc>
 8003424:	2c00      	cmp	r4, #0
 8003426:	d048      	beq.n	80034ba <_malloc_r+0xe6>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	4631      	mov	r1, r6
 800342c:	4638      	mov	r0, r7
 800342e:	eb04 0903 	add.w	r9, r4, r3
 8003432:	f000 fc73 	bl	8003d1c <_sbrk_r>
 8003436:	4581      	cmp	r9, r0
 8003438:	d13f      	bne.n	80034ba <_malloc_r+0xe6>
 800343a:	6821      	ldr	r1, [r4, #0]
 800343c:	1a6d      	subs	r5, r5, r1
 800343e:	4629      	mov	r1, r5
 8003440:	4638      	mov	r0, r7
 8003442:	f7ff ffa7 	bl	8003394 <sbrk_aligned>
 8003446:	3001      	adds	r0, #1
 8003448:	d037      	beq.n	80034ba <_malloc_r+0xe6>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	442b      	add	r3, r5
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	f8d8 3000 	ldr.w	r3, [r8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d038      	beq.n	80034ca <_malloc_r+0xf6>
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	42a2      	cmp	r2, r4
 800345c:	d12b      	bne.n	80034b6 <_malloc_r+0xe2>
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e00f      	b.n	8003484 <_malloc_r+0xb0>
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	1b52      	subs	r2, r2, r5
 8003468:	d41f      	bmi.n	80034aa <_malloc_r+0xd6>
 800346a:	2a0b      	cmp	r2, #11
 800346c:	d917      	bls.n	800349e <_malloc_r+0xca>
 800346e:	1961      	adds	r1, r4, r5
 8003470:	42a3      	cmp	r3, r4
 8003472:	6025      	str	r5, [r4, #0]
 8003474:	bf18      	it	ne
 8003476:	6059      	strne	r1, [r3, #4]
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	bf08      	it	eq
 800347c:	f8c8 1000 	streq.w	r1, [r8]
 8003480:	5162      	str	r2, [r4, r5]
 8003482:	604b      	str	r3, [r1, #4]
 8003484:	4638      	mov	r0, r7
 8003486:	f104 060b 	add.w	r6, r4, #11
 800348a:	f000 f829 	bl	80034e0 <__malloc_unlock>
 800348e:	f026 0607 	bic.w	r6, r6, #7
 8003492:	1d23      	adds	r3, r4, #4
 8003494:	1af2      	subs	r2, r6, r3
 8003496:	d0ae      	beq.n	80033f6 <_malloc_r+0x22>
 8003498:	1b9b      	subs	r3, r3, r6
 800349a:	50a3      	str	r3, [r4, r2]
 800349c:	e7ab      	b.n	80033f6 <_malloc_r+0x22>
 800349e:	42a3      	cmp	r3, r4
 80034a0:	6862      	ldr	r2, [r4, #4]
 80034a2:	d1dd      	bne.n	8003460 <_malloc_r+0x8c>
 80034a4:	f8c8 2000 	str.w	r2, [r8]
 80034a8:	e7ec      	b.n	8003484 <_malloc_r+0xb0>
 80034aa:	4623      	mov	r3, r4
 80034ac:	6864      	ldr	r4, [r4, #4]
 80034ae:	e7ac      	b.n	800340a <_malloc_r+0x36>
 80034b0:	4634      	mov	r4, r6
 80034b2:	6876      	ldr	r6, [r6, #4]
 80034b4:	e7b4      	b.n	8003420 <_malloc_r+0x4c>
 80034b6:	4613      	mov	r3, r2
 80034b8:	e7cc      	b.n	8003454 <_malloc_r+0x80>
 80034ba:	230c      	movs	r3, #12
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4638      	mov	r0, r7
 80034c0:	f000 f80e 	bl	80034e0 <__malloc_unlock>
 80034c4:	e797      	b.n	80033f6 <_malloc_r+0x22>
 80034c6:	6025      	str	r5, [r4, #0]
 80034c8:	e7dc      	b.n	8003484 <_malloc_r+0xb0>
 80034ca:	605b      	str	r3, [r3, #4]
 80034cc:	deff      	udf	#255	; 0xff
 80034ce:	bf00      	nop
 80034d0:	20000404 	.word	0x20000404

080034d4 <__malloc_lock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__malloc_lock+0x8>)
 80034d6:	f7ff bf0e 	b.w	80032f6 <__retarget_lock_acquire_recursive>
 80034da:	bf00      	nop
 80034dc:	20000400 	.word	0x20000400

080034e0 <__malloc_unlock>:
 80034e0:	4801      	ldr	r0, [pc, #4]	; (80034e8 <__malloc_unlock+0x8>)
 80034e2:	f7ff bf09 	b.w	80032f8 <__retarget_lock_release_recursive>
 80034e6:	bf00      	nop
 80034e8:	20000400 	.word	0x20000400

080034ec <__sfputc_r>:
 80034ec:	6893      	ldr	r3, [r2, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	b410      	push	{r4}
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	da08      	bge.n	800350a <__sfputc_r+0x1e>
 80034f8:	6994      	ldr	r4, [r2, #24]
 80034fa:	42a3      	cmp	r3, r4
 80034fc:	db01      	blt.n	8003502 <__sfputc_r+0x16>
 80034fe:	290a      	cmp	r1, #10
 8003500:	d103      	bne.n	800350a <__sfputc_r+0x1e>
 8003502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003506:	f000 bb73 	b.w	8003bf0 <__swbuf_r>
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	1c58      	adds	r0, r3, #1
 800350e:	6010      	str	r0, [r2, #0]
 8003510:	7019      	strb	r1, [r3, #0]
 8003512:	4608      	mov	r0, r1
 8003514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003518:	4770      	bx	lr

0800351a <__sfputs_r>:
 800351a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351c:	4606      	mov	r6, r0
 800351e:	460f      	mov	r7, r1
 8003520:	4614      	mov	r4, r2
 8003522:	18d5      	adds	r5, r2, r3
 8003524:	42ac      	cmp	r4, r5
 8003526:	d101      	bne.n	800352c <__sfputs_r+0x12>
 8003528:	2000      	movs	r0, #0
 800352a:	e007      	b.n	800353c <__sfputs_r+0x22>
 800352c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003530:	463a      	mov	r2, r7
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff ffda 	bl	80034ec <__sfputc_r>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d1f3      	bne.n	8003524 <__sfputs_r+0xa>
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003540 <_vfiprintf_r>:
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	460d      	mov	r5, r1
 8003546:	b09d      	sub	sp, #116	; 0x74
 8003548:	4614      	mov	r4, r2
 800354a:	4698      	mov	r8, r3
 800354c:	4606      	mov	r6, r0
 800354e:	b118      	cbz	r0, 8003558 <_vfiprintf_r+0x18>
 8003550:	6a03      	ldr	r3, [r0, #32]
 8003552:	b90b      	cbnz	r3, 8003558 <_vfiprintf_r+0x18>
 8003554:	f7ff fdca 	bl	80030ec <__sinit>
 8003558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800355a:	07d9      	lsls	r1, r3, #31
 800355c:	d405      	bmi.n	800356a <_vfiprintf_r+0x2a>
 800355e:	89ab      	ldrh	r3, [r5, #12]
 8003560:	059a      	lsls	r2, r3, #22
 8003562:	d402      	bmi.n	800356a <_vfiprintf_r+0x2a>
 8003564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003566:	f7ff fec6 	bl	80032f6 <__retarget_lock_acquire_recursive>
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	d501      	bpl.n	8003574 <_vfiprintf_r+0x34>
 8003570:	692b      	ldr	r3, [r5, #16]
 8003572:	b99b      	cbnz	r3, 800359c <_vfiprintf_r+0x5c>
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f000 fb78 	bl	8003c6c <__swsetup_r>
 800357c:	b170      	cbz	r0, 800359c <_vfiprintf_r+0x5c>
 800357e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003580:	07dc      	lsls	r4, r3, #31
 8003582:	d504      	bpl.n	800358e <_vfiprintf_r+0x4e>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	b01d      	add	sp, #116	; 0x74
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	89ab      	ldrh	r3, [r5, #12]
 8003590:	0598      	lsls	r0, r3, #22
 8003592:	d4f7      	bmi.n	8003584 <_vfiprintf_r+0x44>
 8003594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003596:	f7ff feaf 	bl	80032f8 <__retarget_lock_release_recursive>
 800359a:	e7f3      	b.n	8003584 <_vfiprintf_r+0x44>
 800359c:	2300      	movs	r3, #0
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	2320      	movs	r3, #32
 80035a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035aa:	2330      	movs	r3, #48	; 0x30
 80035ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003760 <_vfiprintf_r+0x220>
 80035b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035b4:	f04f 0901 	mov.w	r9, #1
 80035b8:	4623      	mov	r3, r4
 80035ba:	469a      	mov	sl, r3
 80035bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035c0:	b10a      	cbz	r2, 80035c6 <_vfiprintf_r+0x86>
 80035c2:	2a25      	cmp	r2, #37	; 0x25
 80035c4:	d1f9      	bne.n	80035ba <_vfiprintf_r+0x7a>
 80035c6:	ebba 0b04 	subs.w	fp, sl, r4
 80035ca:	d00b      	beq.n	80035e4 <_vfiprintf_r+0xa4>
 80035cc:	465b      	mov	r3, fp
 80035ce:	4622      	mov	r2, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7ff ffa1 	bl	800351a <__sfputs_r>
 80035d8:	3001      	adds	r0, #1
 80035da:	f000 80a9 	beq.w	8003730 <_vfiprintf_r+0x1f0>
 80035de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035e0:	445a      	add	r2, fp
 80035e2:	9209      	str	r2, [sp, #36]	; 0x24
 80035e4:	f89a 3000 	ldrb.w	r3, [sl]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a1 	beq.w	8003730 <_vfiprintf_r+0x1f0>
 80035ee:	2300      	movs	r3, #0
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035f8:	f10a 0a01 	add.w	sl, sl, #1
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	9307      	str	r3, [sp, #28]
 8003600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003604:	931a      	str	r3, [sp, #104]	; 0x68
 8003606:	4654      	mov	r4, sl
 8003608:	2205      	movs	r2, #5
 800360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360e:	4854      	ldr	r0, [pc, #336]	; (8003760 <_vfiprintf_r+0x220>)
 8003610:	f7fc fe1e 	bl	8000250 <memchr>
 8003614:	9a04      	ldr	r2, [sp, #16]
 8003616:	b9d8      	cbnz	r0, 8003650 <_vfiprintf_r+0x110>
 8003618:	06d1      	lsls	r1, r2, #27
 800361a:	bf44      	itt	mi
 800361c:	2320      	movmi	r3, #32
 800361e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003622:	0713      	lsls	r3, r2, #28
 8003624:	bf44      	itt	mi
 8003626:	232b      	movmi	r3, #43	; 0x2b
 8003628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800362c:	f89a 3000 	ldrb.w	r3, [sl]
 8003630:	2b2a      	cmp	r3, #42	; 0x2a
 8003632:	d015      	beq.n	8003660 <_vfiprintf_r+0x120>
 8003634:	9a07      	ldr	r2, [sp, #28]
 8003636:	4654      	mov	r4, sl
 8003638:	2000      	movs	r0, #0
 800363a:	f04f 0c0a 	mov.w	ip, #10
 800363e:	4621      	mov	r1, r4
 8003640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003644:	3b30      	subs	r3, #48	; 0x30
 8003646:	2b09      	cmp	r3, #9
 8003648:	d94d      	bls.n	80036e6 <_vfiprintf_r+0x1a6>
 800364a:	b1b0      	cbz	r0, 800367a <_vfiprintf_r+0x13a>
 800364c:	9207      	str	r2, [sp, #28]
 800364e:	e014      	b.n	800367a <_vfiprintf_r+0x13a>
 8003650:	eba0 0308 	sub.w	r3, r0, r8
 8003654:	fa09 f303 	lsl.w	r3, r9, r3
 8003658:	4313      	orrs	r3, r2
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	46a2      	mov	sl, r4
 800365e:	e7d2      	b.n	8003606 <_vfiprintf_r+0xc6>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	1d19      	adds	r1, r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	9103      	str	r1, [sp, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	bfbb      	ittet	lt
 800366c:	425b      	neglt	r3, r3
 800366e:	f042 0202 	orrlt.w	r2, r2, #2
 8003672:	9307      	strge	r3, [sp, #28]
 8003674:	9307      	strlt	r3, [sp, #28]
 8003676:	bfb8      	it	lt
 8003678:	9204      	strlt	r2, [sp, #16]
 800367a:	7823      	ldrb	r3, [r4, #0]
 800367c:	2b2e      	cmp	r3, #46	; 0x2e
 800367e:	d10c      	bne.n	800369a <_vfiprintf_r+0x15a>
 8003680:	7863      	ldrb	r3, [r4, #1]
 8003682:	2b2a      	cmp	r3, #42	; 0x2a
 8003684:	d134      	bne.n	80036f0 <_vfiprintf_r+0x1b0>
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	1d1a      	adds	r2, r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	9203      	str	r2, [sp, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfb8      	it	lt
 8003692:	f04f 33ff 	movlt.w	r3, #4294967295
 8003696:	3402      	adds	r4, #2
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003770 <_vfiprintf_r+0x230>
 800369e:	7821      	ldrb	r1, [r4, #0]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4650      	mov	r0, sl
 80036a4:	f7fc fdd4 	bl	8000250 <memchr>
 80036a8:	b138      	cbz	r0, 80036ba <_vfiprintf_r+0x17a>
 80036aa:	9b04      	ldr	r3, [sp, #16]
 80036ac:	eba0 000a 	sub.w	r0, r0, sl
 80036b0:	2240      	movs	r2, #64	; 0x40
 80036b2:	4082      	lsls	r2, r0
 80036b4:	4313      	orrs	r3, r2
 80036b6:	3401      	adds	r4, #1
 80036b8:	9304      	str	r3, [sp, #16]
 80036ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036be:	4829      	ldr	r0, [pc, #164]	; (8003764 <_vfiprintf_r+0x224>)
 80036c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036c4:	2206      	movs	r2, #6
 80036c6:	f7fc fdc3 	bl	8000250 <memchr>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d03f      	beq.n	800374e <_vfiprintf_r+0x20e>
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <_vfiprintf_r+0x228>)
 80036d0:	bb1b      	cbnz	r3, 800371a <_vfiprintf_r+0x1da>
 80036d2:	9b03      	ldr	r3, [sp, #12]
 80036d4:	3307      	adds	r3, #7
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	3308      	adds	r3, #8
 80036dc:	9303      	str	r3, [sp, #12]
 80036de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e0:	443b      	add	r3, r7
 80036e2:	9309      	str	r3, [sp, #36]	; 0x24
 80036e4:	e768      	b.n	80035b8 <_vfiprintf_r+0x78>
 80036e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036ea:	460c      	mov	r4, r1
 80036ec:	2001      	movs	r0, #1
 80036ee:	e7a6      	b.n	800363e <_vfiprintf_r+0xfe>
 80036f0:	2300      	movs	r3, #0
 80036f2:	3401      	adds	r4, #1
 80036f4:	9305      	str	r3, [sp, #20]
 80036f6:	4619      	mov	r1, r3
 80036f8:	f04f 0c0a 	mov.w	ip, #10
 80036fc:	4620      	mov	r0, r4
 80036fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003702:	3a30      	subs	r2, #48	; 0x30
 8003704:	2a09      	cmp	r2, #9
 8003706:	d903      	bls.n	8003710 <_vfiprintf_r+0x1d0>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0c6      	beq.n	800369a <_vfiprintf_r+0x15a>
 800370c:	9105      	str	r1, [sp, #20]
 800370e:	e7c4      	b.n	800369a <_vfiprintf_r+0x15a>
 8003710:	fb0c 2101 	mla	r1, ip, r1, r2
 8003714:	4604      	mov	r4, r0
 8003716:	2301      	movs	r3, #1
 8003718:	e7f0      	b.n	80036fc <_vfiprintf_r+0x1bc>
 800371a:	ab03      	add	r3, sp, #12
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	462a      	mov	r2, r5
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <_vfiprintf_r+0x22c>)
 8003722:	a904      	add	r1, sp, #16
 8003724:	4630      	mov	r0, r6
 8003726:	f3af 8000 	nop.w
 800372a:	4607      	mov	r7, r0
 800372c:	1c78      	adds	r0, r7, #1
 800372e:	d1d6      	bne.n	80036de <_vfiprintf_r+0x19e>
 8003730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003732:	07d9      	lsls	r1, r3, #31
 8003734:	d405      	bmi.n	8003742 <_vfiprintf_r+0x202>
 8003736:	89ab      	ldrh	r3, [r5, #12]
 8003738:	059a      	lsls	r2, r3, #22
 800373a:	d402      	bmi.n	8003742 <_vfiprintf_r+0x202>
 800373c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800373e:	f7ff fddb 	bl	80032f8 <__retarget_lock_release_recursive>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	065b      	lsls	r3, r3, #25
 8003746:	f53f af1d 	bmi.w	8003584 <_vfiprintf_r+0x44>
 800374a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374c:	e71c      	b.n	8003588 <_vfiprintf_r+0x48>
 800374e:	ab03      	add	r3, sp, #12
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	462a      	mov	r2, r5
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <_vfiprintf_r+0x22c>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	4630      	mov	r0, r6
 800375a:	f000 f879 	bl	8003850 <_printf_i>
 800375e:	e7e4      	b.n	800372a <_vfiprintf_r+0x1ea>
 8003760:	08003e88 	.word	0x08003e88
 8003764:	08003e92 	.word	0x08003e92
 8003768:	00000000 	.word	0x00000000
 800376c:	0800351b 	.word	0x0800351b
 8003770:	08003e8e 	.word	0x08003e8e

08003774 <_printf_common>:
 8003774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	4616      	mov	r6, r2
 800377a:	4699      	mov	r9, r3
 800377c:	688a      	ldr	r2, [r1, #8]
 800377e:	690b      	ldr	r3, [r1, #16]
 8003780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003784:	4293      	cmp	r3, r2
 8003786:	bfb8      	it	lt
 8003788:	4613      	movlt	r3, r2
 800378a:	6033      	str	r3, [r6, #0]
 800378c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003790:	4607      	mov	r7, r0
 8003792:	460c      	mov	r4, r1
 8003794:	b10a      	cbz	r2, 800379a <_printf_common+0x26>
 8003796:	3301      	adds	r3, #1
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	0699      	lsls	r1, r3, #26
 800379e:	bf42      	ittt	mi
 80037a0:	6833      	ldrmi	r3, [r6, #0]
 80037a2:	3302      	addmi	r3, #2
 80037a4:	6033      	strmi	r3, [r6, #0]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	f015 0506 	ands.w	r5, r5, #6
 80037ac:	d106      	bne.n	80037bc <_printf_common+0x48>
 80037ae:	f104 0a19 	add.w	sl, r4, #25
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	6832      	ldr	r2, [r6, #0]
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	42ab      	cmp	r3, r5
 80037ba:	dc26      	bgt.n	800380a <_printf_common+0x96>
 80037bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c0:	1e13      	subs	r3, r2, #0
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	bf18      	it	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	0692      	lsls	r2, r2, #26
 80037ca:	d42b      	bmi.n	8003824 <_printf_common+0xb0>
 80037cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d0:	4649      	mov	r1, r9
 80037d2:	4638      	mov	r0, r7
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d01e      	beq.n	8003818 <_printf_common+0xa4>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	6922      	ldr	r2, [r4, #16]
 80037de:	f003 0306 	and.w	r3, r3, #6
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf02      	ittt	eq
 80037e6:	68e5      	ldreq	r5, [r4, #12]
 80037e8:	6833      	ldreq	r3, [r6, #0]
 80037ea:	1aed      	subeq	r5, r5, r3
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	bf0c      	ite	eq
 80037f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f4:	2500      	movne	r5, #0
 80037f6:	4293      	cmp	r3, r2
 80037f8:	bfc4      	itt	gt
 80037fa:	1a9b      	subgt	r3, r3, r2
 80037fc:	18ed      	addgt	r5, r5, r3
 80037fe:	2600      	movs	r6, #0
 8003800:	341a      	adds	r4, #26
 8003802:	42b5      	cmp	r5, r6
 8003804:	d11a      	bne.n	800383c <_printf_common+0xc8>
 8003806:	2000      	movs	r0, #0
 8003808:	e008      	b.n	800381c <_printf_common+0xa8>
 800380a:	2301      	movs	r3, #1
 800380c:	4652      	mov	r2, sl
 800380e:	4649      	mov	r1, r9
 8003810:	4638      	mov	r0, r7
 8003812:	47c0      	blx	r8
 8003814:	3001      	adds	r0, #1
 8003816:	d103      	bne.n	8003820 <_printf_common+0xac>
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003820:	3501      	adds	r5, #1
 8003822:	e7c6      	b.n	80037b2 <_printf_common+0x3e>
 8003824:	18e1      	adds	r1, r4, r3
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	2030      	movs	r0, #48	; 0x30
 800382a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800382e:	4422      	add	r2, r4
 8003830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003838:	3302      	adds	r3, #2
 800383a:	e7c7      	b.n	80037cc <_printf_common+0x58>
 800383c:	2301      	movs	r3, #1
 800383e:	4622      	mov	r2, r4
 8003840:	4649      	mov	r1, r9
 8003842:	4638      	mov	r0, r7
 8003844:	47c0      	blx	r8
 8003846:	3001      	adds	r0, #1
 8003848:	d0e6      	beq.n	8003818 <_printf_common+0xa4>
 800384a:	3601      	adds	r6, #1
 800384c:	e7d9      	b.n	8003802 <_printf_common+0x8e>
	...

08003850 <_printf_i>:
 8003850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	7e0f      	ldrb	r7, [r1, #24]
 8003856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003858:	2f78      	cmp	r7, #120	; 0x78
 800385a:	4691      	mov	r9, r2
 800385c:	4680      	mov	r8, r0
 800385e:	460c      	mov	r4, r1
 8003860:	469a      	mov	sl, r3
 8003862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003866:	d807      	bhi.n	8003878 <_printf_i+0x28>
 8003868:	2f62      	cmp	r7, #98	; 0x62
 800386a:	d80a      	bhi.n	8003882 <_printf_i+0x32>
 800386c:	2f00      	cmp	r7, #0
 800386e:	f000 80d4 	beq.w	8003a1a <_printf_i+0x1ca>
 8003872:	2f58      	cmp	r7, #88	; 0x58
 8003874:	f000 80c0 	beq.w	80039f8 <_printf_i+0x1a8>
 8003878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003880:	e03a      	b.n	80038f8 <_printf_i+0xa8>
 8003882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003886:	2b15      	cmp	r3, #21
 8003888:	d8f6      	bhi.n	8003878 <_printf_i+0x28>
 800388a:	a101      	add	r1, pc, #4	; (adr r1, 8003890 <_printf_i+0x40>)
 800388c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003890:	080038e9 	.word	0x080038e9
 8003894:	080038fd 	.word	0x080038fd
 8003898:	08003879 	.word	0x08003879
 800389c:	08003879 	.word	0x08003879
 80038a0:	08003879 	.word	0x08003879
 80038a4:	08003879 	.word	0x08003879
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	08003879 	.word	0x08003879
 80038b0:	08003879 	.word	0x08003879
 80038b4:	08003879 	.word	0x08003879
 80038b8:	08003879 	.word	0x08003879
 80038bc:	08003a01 	.word	0x08003a01
 80038c0:	08003929 	.word	0x08003929
 80038c4:	080039bb 	.word	0x080039bb
 80038c8:	08003879 	.word	0x08003879
 80038cc:	08003879 	.word	0x08003879
 80038d0:	08003a23 	.word	0x08003a23
 80038d4:	08003879 	.word	0x08003879
 80038d8:	08003929 	.word	0x08003929
 80038dc:	08003879 	.word	0x08003879
 80038e0:	08003879 	.word	0x08003879
 80038e4:	080039c3 	.word	0x080039c3
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	1d1a      	adds	r2, r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	602a      	str	r2, [r5, #0]
 80038f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038f8:	2301      	movs	r3, #1
 80038fa:	e09f      	b.n	8003a3c <_printf_i+0x1ec>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	0607      	lsls	r7, r0, #24
 8003902:	f103 0104 	add.w	r1, r3, #4
 8003906:	6029      	str	r1, [r5, #0]
 8003908:	d501      	bpl.n	800390e <_printf_i+0xbe>
 800390a:	681e      	ldr	r6, [r3, #0]
 800390c:	e003      	b.n	8003916 <_printf_i+0xc6>
 800390e:	0646      	lsls	r6, r0, #25
 8003910:	d5fb      	bpl.n	800390a <_printf_i+0xba>
 8003912:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003916:	2e00      	cmp	r6, #0
 8003918:	da03      	bge.n	8003922 <_printf_i+0xd2>
 800391a:	232d      	movs	r3, #45	; 0x2d
 800391c:	4276      	negs	r6, r6
 800391e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003922:	485a      	ldr	r0, [pc, #360]	; (8003a8c <_printf_i+0x23c>)
 8003924:	230a      	movs	r3, #10
 8003926:	e012      	b.n	800394e <_printf_i+0xfe>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	1d19      	adds	r1, r3, #4
 800392e:	6029      	str	r1, [r5, #0]
 8003930:	0605      	lsls	r5, r0, #24
 8003932:	d501      	bpl.n	8003938 <_printf_i+0xe8>
 8003934:	681e      	ldr	r6, [r3, #0]
 8003936:	e002      	b.n	800393e <_printf_i+0xee>
 8003938:	0641      	lsls	r1, r0, #25
 800393a:	d5fb      	bpl.n	8003934 <_printf_i+0xe4>
 800393c:	881e      	ldrh	r6, [r3, #0]
 800393e:	4853      	ldr	r0, [pc, #332]	; (8003a8c <_printf_i+0x23c>)
 8003940:	2f6f      	cmp	r7, #111	; 0x6f
 8003942:	bf0c      	ite	eq
 8003944:	2308      	moveq	r3, #8
 8003946:	230a      	movne	r3, #10
 8003948:	2100      	movs	r1, #0
 800394a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800394e:	6865      	ldr	r5, [r4, #4]
 8003950:	60a5      	str	r5, [r4, #8]
 8003952:	2d00      	cmp	r5, #0
 8003954:	bfa2      	ittt	ge
 8003956:	6821      	ldrge	r1, [r4, #0]
 8003958:	f021 0104 	bicge.w	r1, r1, #4
 800395c:	6021      	strge	r1, [r4, #0]
 800395e:	b90e      	cbnz	r6, 8003964 <_printf_i+0x114>
 8003960:	2d00      	cmp	r5, #0
 8003962:	d04b      	beq.n	80039fc <_printf_i+0x1ac>
 8003964:	4615      	mov	r5, r2
 8003966:	fbb6 f1f3 	udiv	r1, r6, r3
 800396a:	fb03 6711 	mls	r7, r3, r1, r6
 800396e:	5dc7      	ldrb	r7, [r0, r7]
 8003970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003974:	4637      	mov	r7, r6
 8003976:	42bb      	cmp	r3, r7
 8003978:	460e      	mov	r6, r1
 800397a:	d9f4      	bls.n	8003966 <_printf_i+0x116>
 800397c:	2b08      	cmp	r3, #8
 800397e:	d10b      	bne.n	8003998 <_printf_i+0x148>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	07de      	lsls	r6, r3, #31
 8003984:	d508      	bpl.n	8003998 <_printf_i+0x148>
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	6861      	ldr	r1, [r4, #4]
 800398a:	4299      	cmp	r1, r3
 800398c:	bfde      	ittt	le
 800398e:	2330      	movle	r3, #48	; 0x30
 8003990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003998:	1b52      	subs	r2, r2, r5
 800399a:	6122      	str	r2, [r4, #16]
 800399c:	f8cd a000 	str.w	sl, [sp]
 80039a0:	464b      	mov	r3, r9
 80039a2:	aa03      	add	r2, sp, #12
 80039a4:	4621      	mov	r1, r4
 80039a6:	4640      	mov	r0, r8
 80039a8:	f7ff fee4 	bl	8003774 <_printf_common>
 80039ac:	3001      	adds	r0, #1
 80039ae:	d14a      	bne.n	8003a46 <_printf_i+0x1f6>
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	b004      	add	sp, #16
 80039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	f043 0320 	orr.w	r3, r3, #32
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	4833      	ldr	r0, [pc, #204]	; (8003a90 <_printf_i+0x240>)
 80039c4:	2778      	movs	r7, #120	; 0x78
 80039c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	6829      	ldr	r1, [r5, #0]
 80039ce:	061f      	lsls	r7, r3, #24
 80039d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039d4:	d402      	bmi.n	80039dc <_printf_i+0x18c>
 80039d6:	065f      	lsls	r7, r3, #25
 80039d8:	bf48      	it	mi
 80039da:	b2b6      	uxthmi	r6, r6
 80039dc:	07df      	lsls	r7, r3, #31
 80039de:	bf48      	it	mi
 80039e0:	f043 0320 	orrmi.w	r3, r3, #32
 80039e4:	6029      	str	r1, [r5, #0]
 80039e6:	bf48      	it	mi
 80039e8:	6023      	strmi	r3, [r4, #0]
 80039ea:	b91e      	cbnz	r6, 80039f4 <_printf_i+0x1a4>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	f023 0320 	bic.w	r3, r3, #32
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	2310      	movs	r3, #16
 80039f6:	e7a7      	b.n	8003948 <_printf_i+0xf8>
 80039f8:	4824      	ldr	r0, [pc, #144]	; (8003a8c <_printf_i+0x23c>)
 80039fa:	e7e4      	b.n	80039c6 <_printf_i+0x176>
 80039fc:	4615      	mov	r5, r2
 80039fe:	e7bd      	b.n	800397c <_printf_i+0x12c>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	6826      	ldr	r6, [r4, #0]
 8003a04:	6961      	ldr	r1, [r4, #20]
 8003a06:	1d18      	adds	r0, r3, #4
 8003a08:	6028      	str	r0, [r5, #0]
 8003a0a:	0635      	lsls	r5, r6, #24
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	d501      	bpl.n	8003a14 <_printf_i+0x1c4>
 8003a10:	6019      	str	r1, [r3, #0]
 8003a12:	e002      	b.n	8003a1a <_printf_i+0x1ca>
 8003a14:	0670      	lsls	r0, r6, #25
 8003a16:	d5fb      	bpl.n	8003a10 <_printf_i+0x1c0>
 8003a18:	8019      	strh	r1, [r3, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6123      	str	r3, [r4, #16]
 8003a1e:	4615      	mov	r5, r2
 8003a20:	e7bc      	b.n	800399c <_printf_i+0x14c>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	602a      	str	r2, [r5, #0]
 8003a28:	681d      	ldr	r5, [r3, #0]
 8003a2a:	6862      	ldr	r2, [r4, #4]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f7fc fc0e 	bl	8000250 <memchr>
 8003a34:	b108      	cbz	r0, 8003a3a <_printf_i+0x1ea>
 8003a36:	1b40      	subs	r0, r0, r5
 8003a38:	6060      	str	r0, [r4, #4]
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a44:	e7aa      	b.n	800399c <_printf_i+0x14c>
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	47d0      	blx	sl
 8003a50:	3001      	adds	r0, #1
 8003a52:	d0ad      	beq.n	80039b0 <_printf_i+0x160>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	079b      	lsls	r3, r3, #30
 8003a58:	d413      	bmi.n	8003a82 <_printf_i+0x232>
 8003a5a:	68e0      	ldr	r0, [r4, #12]
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	4298      	cmp	r0, r3
 8003a60:	bfb8      	it	lt
 8003a62:	4618      	movlt	r0, r3
 8003a64:	e7a6      	b.n	80039b4 <_printf_i+0x164>
 8003a66:	2301      	movs	r3, #1
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	47d0      	blx	sl
 8003a70:	3001      	adds	r0, #1
 8003a72:	d09d      	beq.n	80039b0 <_printf_i+0x160>
 8003a74:	3501      	adds	r5, #1
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	9903      	ldr	r1, [sp, #12]
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	dcf2      	bgt.n	8003a66 <_printf_i+0x216>
 8003a80:	e7eb      	b.n	8003a5a <_printf_i+0x20a>
 8003a82:	2500      	movs	r5, #0
 8003a84:	f104 0619 	add.w	r6, r4, #25
 8003a88:	e7f5      	b.n	8003a76 <_printf_i+0x226>
 8003a8a:	bf00      	nop
 8003a8c:	08003e99 	.word	0x08003e99
 8003a90:	08003eaa 	.word	0x08003eaa

08003a94 <__sflush_r>:
 8003a94:	898a      	ldrh	r2, [r1, #12]
 8003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	0710      	lsls	r0, r2, #28
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	d458      	bmi.n	8003b54 <__sflush_r+0xc0>
 8003aa2:	684b      	ldr	r3, [r1, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dc05      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dc02      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d0f9      	beq.n	8003aae <__sflush_r+0x1a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ac0:	682f      	ldr	r7, [r5, #0]
 8003ac2:	6a21      	ldr	r1, [r4, #32]
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	d032      	beq.n	8003b2e <__sflush_r+0x9a>
 8003ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	075a      	lsls	r2, r3, #29
 8003ace:	d505      	bpl.n	8003adc <__sflush_r+0x48>
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	1ac0      	subs	r0, r0, r3
 8003ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ad6:	b10b      	cbz	r3, 8003adc <__sflush_r+0x48>
 8003ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ada:	1ac0      	subs	r0, r0, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ae2:	6a21      	ldr	r1, [r4, #32]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b0      	blx	r6
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	d106      	bne.n	8003afc <__sflush_r+0x68>
 8003aee:	6829      	ldr	r1, [r5, #0]
 8003af0:	291d      	cmp	r1, #29
 8003af2:	d82b      	bhi.n	8003b4c <__sflush_r+0xb8>
 8003af4:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <__sflush_r+0x108>)
 8003af6:	410a      	asrs	r2, r1
 8003af8:	07d6      	lsls	r6, r2, #31
 8003afa:	d427      	bmi.n	8003b4c <__sflush_r+0xb8>
 8003afc:	2200      	movs	r2, #0
 8003afe:	6062      	str	r2, [r4, #4]
 8003b00:	04d9      	lsls	r1, r3, #19
 8003b02:	6922      	ldr	r2, [r4, #16]
 8003b04:	6022      	str	r2, [r4, #0]
 8003b06:	d504      	bpl.n	8003b12 <__sflush_r+0x7e>
 8003b08:	1c42      	adds	r2, r0, #1
 8003b0a:	d101      	bne.n	8003b10 <__sflush_r+0x7c>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b903      	cbnz	r3, 8003b12 <__sflush_r+0x7e>
 8003b10:	6560      	str	r0, [r4, #84]	; 0x54
 8003b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b14:	602f      	str	r7, [r5, #0]
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d0c9      	beq.n	8003aae <__sflush_r+0x1a>
 8003b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d002      	beq.n	8003b28 <__sflush_r+0x94>
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7ff fbea 	bl	80032fc <_free_r>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8003b2c:	e7c0      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	4628      	mov	r0, r5
 8003b32:	47b0      	blx	r6
 8003b34:	1c41      	adds	r1, r0, #1
 8003b36:	d1c8      	bne.n	8003aca <__sflush_r+0x36>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0c5      	beq.n	8003aca <__sflush_r+0x36>
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	d001      	beq.n	8003b46 <__sflush_r+0xb2>
 8003b42:	2b16      	cmp	r3, #22
 8003b44:	d101      	bne.n	8003b4a <__sflush_r+0xb6>
 8003b46:	602f      	str	r7, [r5, #0]
 8003b48:	e7b1      	b.n	8003aae <__sflush_r+0x1a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	e7ad      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b54:	690f      	ldr	r7, [r1, #16]
 8003b56:	2f00      	cmp	r7, #0
 8003b58:	d0a9      	beq.n	8003aae <__sflush_r+0x1a>
 8003b5a:	0793      	lsls	r3, r2, #30
 8003b5c:	680e      	ldr	r6, [r1, #0]
 8003b5e:	bf08      	it	eq
 8003b60:	694b      	ldreq	r3, [r1, #20]
 8003b62:	600f      	str	r7, [r1, #0]
 8003b64:	bf18      	it	ne
 8003b66:	2300      	movne	r3, #0
 8003b68:	eba6 0807 	sub.w	r8, r6, r7
 8003b6c:	608b      	str	r3, [r1, #8]
 8003b6e:	f1b8 0f00 	cmp.w	r8, #0
 8003b72:	dd9c      	ble.n	8003aae <__sflush_r+0x1a>
 8003b74:	6a21      	ldr	r1, [r4, #32]
 8003b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b78:	4643      	mov	r3, r8
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b0      	blx	r6
 8003b80:	2800      	cmp	r0, #0
 8003b82:	dc06      	bgt.n	8003b92 <__sflush_r+0xfe>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e78e      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b92:	4407      	add	r7, r0
 8003b94:	eba8 0800 	sub.w	r8, r8, r0
 8003b98:	e7e9      	b.n	8003b6e <__sflush_r+0xda>
 8003b9a:	bf00      	nop
 8003b9c:	dfbffffe 	.word	0xdfbffffe

08003ba0 <_fflush_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	690b      	ldr	r3, [r1, #16]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	b913      	cbnz	r3, 8003bb0 <_fflush_r+0x10>
 8003baa:	2500      	movs	r5, #0
 8003bac:	4628      	mov	r0, r5
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	b118      	cbz	r0, 8003bba <_fflush_r+0x1a>
 8003bb2:	6a03      	ldr	r3, [r0, #32]
 8003bb4:	b90b      	cbnz	r3, 8003bba <_fflush_r+0x1a>
 8003bb6:	f7ff fa99 	bl	80030ec <__sinit>
 8003bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f3      	beq.n	8003baa <_fflush_r+0xa>
 8003bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bc4:	07d0      	lsls	r0, r2, #31
 8003bc6:	d404      	bmi.n	8003bd2 <_fflush_r+0x32>
 8003bc8:	0599      	lsls	r1, r3, #22
 8003bca:	d402      	bmi.n	8003bd2 <_fflush_r+0x32>
 8003bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bce:	f7ff fb92 	bl	80032f6 <__retarget_lock_acquire_recursive>
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	f7ff ff5d 	bl	8003a94 <__sflush_r>
 8003bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bdc:	07da      	lsls	r2, r3, #31
 8003bde:	4605      	mov	r5, r0
 8003be0:	d4e4      	bmi.n	8003bac <_fflush_r+0xc>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	059b      	lsls	r3, r3, #22
 8003be6:	d4e1      	bmi.n	8003bac <_fflush_r+0xc>
 8003be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bea:	f7ff fb85 	bl	80032f8 <__retarget_lock_release_recursive>
 8003bee:	e7dd      	b.n	8003bac <_fflush_r+0xc>

08003bf0 <__swbuf_r>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	460e      	mov	r6, r1
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	b118      	cbz	r0, 8003c02 <__swbuf_r+0x12>
 8003bfa:	6a03      	ldr	r3, [r0, #32]
 8003bfc:	b90b      	cbnz	r3, 8003c02 <__swbuf_r+0x12>
 8003bfe:	f7ff fa75 	bl	80030ec <__sinit>
 8003c02:	69a3      	ldr	r3, [r4, #24]
 8003c04:	60a3      	str	r3, [r4, #8]
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	071a      	lsls	r2, r3, #28
 8003c0a:	d525      	bpl.n	8003c58 <__swbuf_r+0x68>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	b31b      	cbz	r3, 8003c58 <__swbuf_r+0x68>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	6922      	ldr	r2, [r4, #16]
 8003c14:	1a98      	subs	r0, r3, r2
 8003c16:	6963      	ldr	r3, [r4, #20]
 8003c18:	b2f6      	uxtb	r6, r6
 8003c1a:	4283      	cmp	r3, r0
 8003c1c:	4637      	mov	r7, r6
 8003c1e:	dc04      	bgt.n	8003c2a <__swbuf_r+0x3a>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7ff ffbc 	bl	8003ba0 <_fflush_r>
 8003c28:	b9e0      	cbnz	r0, 8003c64 <__swbuf_r+0x74>
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60a3      	str	r3, [r4, #8]
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	6022      	str	r2, [r4, #0]
 8003c36:	701e      	strb	r6, [r3, #0]
 8003c38:	6962      	ldr	r2, [r4, #20]
 8003c3a:	1c43      	adds	r3, r0, #1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d004      	beq.n	8003c4a <__swbuf_r+0x5a>
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	07db      	lsls	r3, r3, #31
 8003c44:	d506      	bpl.n	8003c54 <__swbuf_r+0x64>
 8003c46:	2e0a      	cmp	r6, #10
 8003c48:	d104      	bne.n	8003c54 <__swbuf_r+0x64>
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f7ff ffa7 	bl	8003ba0 <_fflush_r>
 8003c52:	b938      	cbnz	r0, 8003c64 <__swbuf_r+0x74>
 8003c54:	4638      	mov	r0, r7
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 f806 	bl	8003c6c <__swsetup_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d0d5      	beq.n	8003c10 <__swbuf_r+0x20>
 8003c64:	f04f 37ff 	mov.w	r7, #4294967295
 8003c68:	e7f4      	b.n	8003c54 <__swbuf_r+0x64>
	...

08003c6c <__swsetup_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <__swsetup_r+0xac>)
 8003c70:	4605      	mov	r5, r0
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	460c      	mov	r4, r1
 8003c76:	b118      	cbz	r0, 8003c80 <__swsetup_r+0x14>
 8003c78:	6a03      	ldr	r3, [r0, #32]
 8003c7a:	b90b      	cbnz	r3, 8003c80 <__swsetup_r+0x14>
 8003c7c:	f7ff fa36 	bl	80030ec <__sinit>
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c86:	0718      	lsls	r0, r3, #28
 8003c88:	d422      	bmi.n	8003cd0 <__swsetup_r+0x64>
 8003c8a:	06d9      	lsls	r1, r3, #27
 8003c8c:	d407      	bmi.n	8003c9e <__swsetup_r+0x32>
 8003c8e:	2309      	movs	r3, #9
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e034      	b.n	8003d08 <__swsetup_r+0x9c>
 8003c9e:	0758      	lsls	r0, r3, #29
 8003ca0:	d512      	bpl.n	8003cc8 <__swsetup_r+0x5c>
 8003ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca4:	b141      	cbz	r1, 8003cb8 <__swsetup_r+0x4c>
 8003ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003caa:	4299      	cmp	r1, r3
 8003cac:	d002      	beq.n	8003cb4 <__swsetup_r+0x48>
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f7ff fb24 	bl	80032fc <_free_r>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	6023      	str	r3, [r4, #0]
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	f043 0308 	orr.w	r3, r3, #8
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	b94b      	cbnz	r3, 8003ce8 <__swsetup_r+0x7c>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cde:	d003      	beq.n	8003ce8 <__swsetup_r+0x7c>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f850 	bl	8003d88 <__smakebuf_r>
 8003ce8:	89a0      	ldrh	r0, [r4, #12]
 8003cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cee:	f010 0301 	ands.w	r3, r0, #1
 8003cf2:	d00a      	beq.n	8003d0a <__swsetup_r+0x9e>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	6963      	ldr	r3, [r4, #20]
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	61a3      	str	r3, [r4, #24]
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	b943      	cbnz	r3, 8003d14 <__swsetup_r+0xa8>
 8003d02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d06:	d1c4      	bne.n	8003c92 <__swsetup_r+0x26>
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
 8003d0a:	0781      	lsls	r1, r0, #30
 8003d0c:	bf58      	it	pl
 8003d0e:	6963      	ldrpl	r3, [r4, #20]
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	e7f4      	b.n	8003cfe <__swsetup_r+0x92>
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7f7      	b.n	8003d08 <__swsetup_r+0x9c>
 8003d18:	20000064 	.word	0x20000064

08003d1c <_sbrk_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d06      	ldr	r5, [pc, #24]	; (8003d38 <_sbrk_r+0x1c>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	f7fd fc76 	bl	8001618 <_sbrk>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_sbrk_r+0x1a>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_sbrk_r+0x1a>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	200003fc 	.word	0x200003fc

08003d3c <__swhatbuf_r>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	460c      	mov	r4, r1
 8003d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d44:	2900      	cmp	r1, #0
 8003d46:	b096      	sub	sp, #88	; 0x58
 8003d48:	4615      	mov	r5, r2
 8003d4a:	461e      	mov	r6, r3
 8003d4c:	da0d      	bge.n	8003d6a <__swhatbuf_r+0x2e>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	bf0c      	ite	eq
 8003d5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003d5e:	2340      	movne	r3, #64	; 0x40
 8003d60:	2000      	movs	r0, #0
 8003d62:	6031      	str	r1, [r6, #0]
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	b016      	add	sp, #88	; 0x58
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	466a      	mov	r2, sp
 8003d6c:	f000 f848 	bl	8003e00 <_fstat_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	dbec      	blt.n	8003d4e <__swhatbuf_r+0x12>
 8003d74:	9901      	ldr	r1, [sp, #4]
 8003d76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003d7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003d7e:	4259      	negs	r1, r3
 8003d80:	4159      	adcs	r1, r3
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	e7eb      	b.n	8003d60 <__swhatbuf_r+0x24>

08003d88 <__smakebuf_r>:
 8003d88:	898b      	ldrh	r3, [r1, #12]
 8003d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d8c:	079d      	lsls	r5, r3, #30
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	d507      	bpl.n	8003da4 <__smakebuf_r+0x1c>
 8003d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	6163      	str	r3, [r4, #20]
 8003da0:	b002      	add	sp, #8
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	ab01      	add	r3, sp, #4
 8003da6:	466a      	mov	r2, sp
 8003da8:	f7ff ffc8 	bl	8003d3c <__swhatbuf_r>
 8003dac:	9900      	ldr	r1, [sp, #0]
 8003dae:	4605      	mov	r5, r0
 8003db0:	4630      	mov	r0, r6
 8003db2:	f7ff fb0f 	bl	80033d4 <_malloc_r>
 8003db6:	b948      	cbnz	r0, 8003dcc <__smakebuf_r+0x44>
 8003db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dbc:	059a      	lsls	r2, r3, #22
 8003dbe:	d4ef      	bmi.n	8003da0 <__smakebuf_r+0x18>
 8003dc0:	f023 0303 	bic.w	r3, r3, #3
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	81a3      	strh	r3, [r4, #12]
 8003dca:	e7e3      	b.n	8003d94 <__smakebuf_r+0xc>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	6020      	str	r0, [r4, #0]
 8003dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	9b00      	ldr	r3, [sp, #0]
 8003dd8:	6163      	str	r3, [r4, #20]
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	6120      	str	r0, [r4, #16]
 8003dde:	b15b      	cbz	r3, 8003df8 <__smakebuf_r+0x70>
 8003de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 f81d 	bl	8003e24 <_isatty_r>
 8003dea:	b128      	cbz	r0, 8003df8 <__smakebuf_r+0x70>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	431d      	orrs	r5, r3
 8003dfc:	81a5      	strh	r5, [r4, #12]
 8003dfe:	e7cf      	b.n	8003da0 <__smakebuf_r+0x18>

08003e00 <_fstat_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d07      	ldr	r5, [pc, #28]	; (8003e20 <_fstat_r+0x20>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	f7fd fbda 	bl	80015c6 <_fstat>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d102      	bne.n	8003e1c <_fstat_r+0x1c>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	b103      	cbz	r3, 8003e1c <_fstat_r+0x1c>
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	200003fc 	.word	0x200003fc

08003e24 <_isatty_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d06      	ldr	r5, [pc, #24]	; (8003e40 <_isatty_r+0x1c>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	f7fd fbd9 	bl	80015e6 <_isatty>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_isatty_r+0x1a>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_isatty_r+0x1a>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	200003fc 	.word	0x200003fc

08003e44 <_init>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr

08003e50 <_fini>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr
